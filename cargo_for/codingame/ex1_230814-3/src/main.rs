use std::collections::HashMap;
use std::io;

macro_rules! parse_input {
    ($x:expr, $t:ident) => ($x.trim().parse::<$t>().unwrap())
}

static HYOUKA1 : [i32; 6561] = [  -5976,  -7872,  -7992,  -7812,  -6396,  -7620,  -6504,  -5820,  -6996,  -4248,  -6324,   -924,  -6348,  -5280,  -5580,  -5304,  -2040,  -3180,  -3720,  -2400,      0,  -5388,  -8460,  -3444,    888,  -6660,  -2868,   -300,  -1908,   5568,  -3816,     60,     84,   3420,  -1344,   3156,  -4464,  -9444,  -2376,  -3360,  -4200,  -1368,  -2904,   -672,   -684,  -6588,  -1692,  -1200,  -8052,  -6216,   1728,  -6288,  -2712,    996,  -2760,    348,  -5664,  -1668,  -3540,  -1692,      0,      0,      0,  -3780,  -9192,  -1308,  -5376,  -7380,  -2724,  -3876,  -3276,  -1560,   -168,   1320,   1260,  -4236,  -7488,  -1164,   3252,  -7272,   -276,   -300,   2448,   5772,   5448,   5352,   1584,   7044,   2700,   5580,      0,  -1992,   3708,    624,    120,   3936,   -876,   4452,   1464,      0,      0,      0,  -3696,  -1356,   6516,   7944,   2472,   5220,  -3768,  -3168,   1080,  -4788,  -2832,  -2004,  -3684,  -2496,     24,  -4644,  -6192,   1920,  -5940,  -5148,   -300,  -5748,   1776,   2880,  -7980,    840,  -1920,  -4428,  -6036,     36,  -5064,  -4884,    -36,  -6876,   2640,  -1332,  -8880,  -2976,      0,      0,      0,  -2688,  -6660,  -9888,  -1728,  -5688,  -6456,  -3060,  -5028,  -3348,      0,  -9348,  -1008,  -6036,  -8844,  -8004,  -1224,  -6468,  -2928,   1644,  -2760,   2808,  -5028,   -444,  -1392,    -36,      0,  -2460,  -4944,      0,      0,   2736,  -2736,  -4008,  -4284,   2160,    516,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -6876,  -9900,   3456,  -9444,  -5760,  -5568,   2148,  -2100,   -312,  -5856, -11112,  -5184,  -7044,  -7500,  -4008,  -3768,  -1476,    744,  -6132,  -5496,  -7128,  -7392,  -7092,  -1584,  -9024,  -7092,  -3252,   -252,   2016,  -2640,   1284,   -792,     60,      0,  -1260,  -1044,  -5664,  -9816,  -2388,  -5568,  -7572,  -2208,  -6756,  -2040,      0,    948,   2976,   2496,  -4476,  -7128,  -1272,   5628,  -6972,   2532,  -4248,    744,   3528,    156,   -504,  -1464,   2316,   1284,   3396,      0,      0,      0,      0,   2280,      0,      0,      0,      0,      0,      0,      0,      0,   -324,      0,   8436,   1200,   4884,      0,      0,      0,      0,   4188,      0,      0,      0,      0,      0,      0,      0,      0,    204,   1008,      0,      0,      0,      0,      0,   2952,      0,   -108,   5268,      0,  -3504,   1824,      0,      0,      0,      0,   3564,      0,      0,      0,      0,      0,      0,      0,      0,  -3888,      0,      0,      0,      0,    552,      0,      0,   2388,  -3120,   3024,   6516,  -4740,   4344,  -4464,  -1632,    492,  -3564,  -4476,      0,  -3588,  -6960,  -3108,      0,      0,      0,  -3792,  -3264,  -2784,      0,   1320,      0,      0,      0,      0,  -4752,  -6492,      0,      0,  -2988,  -2244,  -4644,  -1920,      0,  -5892,  -1212,      0,      0,  -1152,      0,      0,  -8256,  -3060,  -6120,  -5820,  -2028,  -8148,  -2904,      0,  -8676,      0,  -1020,  -7068,  -7404,    240,      0,  -8064,  -4164,  -5856,      0,  -7236,  -3060,  -2736,  -3192,      0,      0,      0,      0, -11604,      0,  -7524,  -7908,    624,  -9264,      0,      0,  -7560,   -996,  -4884,  -9300,  -8136,  -2952,  -5892,  -7368,  -1776,  -3780,   4428,  -4740,  -3576,     12,    396,      0,      0,  -3048,      0,      0,      0,      0,   1032,  -2076,      0,   3060,      0,      0,      0,      0,      0,  -1344,      0,   5952,      0,   1764,  -6660,  -6768,  -2016,  -6912,  -6888,  -7884,   -780,  -5628,      0,      0, -11928,      0,  -5928,  -7152,  -3924,  -4704,  -3600,      0,  -7560,  -1440,  -3468,  -4164,  -8532,  -2112, -13704,      0,  -6132,  -5664,   2256,  -4104,  -4428,  -1740,  -2736,      0,      0,      0,      0, -10980,      0,  -9960,  -8124,  -3672,      0,      0,      0,  -4488,   3936,    492,  -4188,  -3924,    480,  -3804,  -5244,   3648,  -3720,   3948,  -4416,   1356,   -948,  -3672,      0,   -372,  -4236,      0,      0,      0,   1668,  -1248,  -5880,      0,   1404,      0,      0,      0,      0,  -2088,  -3720,      0,   2916,      0,  -1716,      0,      0,      0,      0,     84,      0,      0,      0,      0,      0,      0,      0,      0,  -2136,      0,      0,      0,      0,      0,      0,      0,      0,   2628,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -6588,  -5028,   1452,  -5256,  -4164,    312,   1632,  -2112,   6192,      0,      0,      0,  -3060,  -3156,  -2028,      0,   2628,      0,      0,      0,      0,      0,  -4212,   3816,      0,  -2340,   4932,  -7980, -10224,   -540,  -7356,  -4812,  -1188,  -5136,  -8304,      0,  -8676,  -9228,      0,  -7560,  -6792,  -3300,  -5040,  -2832,      0,  -7788,      0,  -2832,  -6576,  -8616,   -804,  -5028,  -6192,  -2616,  -6132,  -4212, -12096, -10212,  -6996,      0,      0,      0,      0,  -7560, -11568,      0,  -8148,  -8988,  -6204,  -6096,      0,      0,  -8892,  -4920,  -9372, -10104,  -9564,      0,  -9516,  -8148,  -2424,   -168,   4320,  -3888,    672,   -900,    300,  -1872,   -672,  -2232,    552,  -2256,   4056,  -1908,   -504,  -2160,   2352,    300,      0,      0,      0,      0,   3768,    864,      0,   5916,      0,   2184,  -9348, -12168,      0, -10944,  -8208,  -6792,      0,  -9048,      0,  -7560, -12372,  -7476,  -5640,  -8796,  -6012,  -3168,  -5340,      0,  -8892,  -8232,  -9924, -10848, -11412,  -6828, -11628,      0,  -4692,    948,   2556,  -2232,   1404,   -792,   -696,      0,      0,    156,  -4488,  -8256,   4284,  -5652,  -7620,  -3732,  -5304,  -2772,  -5364,   1416,   3780,   3900,  -3492,  -7344,   -180,   6708,  -6252,   4440,  -7812,   2544,   1032,  -1140,  -1416,  -2436,    312,  -6600,   -804,    156,  -2676,   1896,  -3972,    -60,  -1416,  -2616,     72,  -1176,   1356,   1164,      0,  -2460,  -5400,  -1992,   3996,  -7296,   1692,   5448,      0,   5412,   3144,   8172,   3552,      0,   4224,   1668,  -3564,   2400,   3816,   3108,   3756,   2208,   -372,   2640,    720,  -5256,   4656,   4164,  -5604,   1500,   3420,  -1368,  -3036,   2700,   -444,   3600,  -1536,   1416,   3288,  -2364,      0,      0,      0,  -3576,  -5976,    540,  -2112,  -4524,  -3720,  -5172,  -3396,  -4992,    672,   3804,   2676,  -3444,  -4560,  -1068,   5328,  -7128,    684,  -3816,   3456,    600,   3144,   4188,   2496,   5676,   1128,   3612,      0,  -1968,   1776,  -1344,   2388,    180,      0,   4020,   3492,      0,      0,      0,  -1548,  -1800,   1464,   6036,  -2976,   2964,  -4788,   6936,   4368,   1944,   2472,    -24,    264,  -1848,   -276,  -5892,   1860,   -636,  -4644,   -480,  -2340,  -7800,  -5172,  -1896,  -7356,    276,    600,  -5628,  -4008,  -3816,  -9432,  -3672,   -792,  -9444,  -1332,  -8184,  -8568,  -4308,  -6252,      0,      0,      0,  -6912,  -2796,    636,  -8532,  -3744,  -6096,  -8880,  -4080,  -7872, -10944,   1248,  -7428,  -8520,  -6084,  -5496,  -7152,  -4212,  -1620,  -1668,   5652,  -1908,   1416,   3828,   2616,      0,   -660,  -3084,      0,      0,   3204,  -3900,   1452,   1296,      0,   1404,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -8880,  -3876,  -1200,  -8568,  -5592,  -7848,    120,      0,      0,  -3060,  -7656,  -6516,  -7212,  -7536,  -5784,  -3588,  -6408,      0, -10212,      0,  -2268,  -8628,  -8520,  -3276, -10104,      0,  -8868,   1284,   6804,     60,   2628,   5208,   2556,      0,      0,      0,  -4428,  -6240,      0,  -2328,  -4284,  -3804, -12660,  -9744,      0,   1404,   8436,   3804,  -3984,  -5316,   -288,   7188, -10128,   2604,  -6348,  -2100,   2436,  -3972,  -3156,  -1068,  -2748,  -5844,     84,      0,   1704,   4872,  -2988,   -888,    612,  -3936,   1920,   2496,   1668,    708,      0,  -3288,  -5736,   1164,   1584,  -3528,   1464,    624,
                                      0,   3756,  -1344,   3624,   1056,    264,    120,   4716,  -3792,  -4044,    972,  -4212,  -2736,   -300,  -3996,  -1572,  -4104,  -3060,   2412,   1656,  -5520,  -4764,   3852,  -4836,    720,   2208,  -2736,      0,  -2340,  -3900,    768,    804,      0,      0,      0,      0,  -4116,   1200,  -2856,  -5292,  -1740,  -6624,  -4548,      0,  -1908,   6936,   -876,  -3324,  -4056,   1872,   1140,  -7416,   1848,  -3360,   3240,   4788,   3108,   3192,   3972,    804,  -2100,   2532,      0,    396,   5796,  -4212,    852,   2904,  -3372,    396,   1260,      0,      0,      0,  -2100,  -2808,   4680,   3684,  -4236,   3276,  -5940,   2544,   4140,  -4644,   -360,   -816,  -5880,  -4704,    780,  -6120,    648,   2052,  -6240,  -4164,  -1368,  -6660,  -3072,   -264,  -7560,   -204,  -1644,  -6660,  -6348,     48,  -7296,  -6120,   -708,  -7044,   3264,  -4128,  -7212,  -2712,   -948,      0,  -8832,      0,  -5928,  -5952,   4548,  -6300,  -7368,  -3576,  -7644,  -5472,  -3432,  -5640,   1848,  -3900,  -6996,  -6528,  -4152,  -6336,  -4848,    840,  -5376,   7188,  -5556,  -2112,   -288,   -564,  -4584,  -3204,  -4188,      0,  -1080,   3180,  -2856,   -732,  -3384,  -4224,   3636,      0,      0,      0,      0,  -4572,  -3840,  -2784,   -960,  -8796,   -648,  -5688,  -3996,   6024,  -8532,  -3564,  -4596,  -1308,  -1680,      0,  -7524,  -9852,  -2676,  -6300,  -7908,  -7236,  -5040,  -2448,    420,  -8148,  -1272,  -4848,  -5796,  -8076,  -1440,  -9516,      0,  -4752,  -5568,   2292,  -4584,  -2328,  -1464,   -168,      0,  -5268,  -3780,  -9960,  -7824,      0,  -8160,  -7104,  -3060,  -6900,      0,      0,  -5652,   4092,  -1764,  -4296,  -5604,   -816,  -5004,  -6312,   2808,  -5388,  10800,  -5280,  -2460,   -624,   1776,  -1512,  -2040,  -2328,      0,   3192,   5772,  -3288,  -1188,  -1824,      0,   1260,      0,  -2088,      0,      0,  -3168,  -2124,  -1668,   3780,  -6048,   -168,  -3696,   8064,   7152,  -1548,   4356,   3576,   2436,      0,      0,  -4752,   2088,   -768,  -2100,   -876,    960,      0,   -516,   1992,      0,      0,      0,  -4284,  -1620,   3252,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   1260,      0,  -4572,  -5052,  -1644,      0,      0,      0,   3768,   4428,      0,  -4848,  -1680,   1920,   5928,  -6792,   1092,  -8052,  -4812,   2796,  -5604,  -4944,  -1212,  -4980,  -1008,   3732,      0,  -2556,   1692,  -5520,  -4212,   3120,  -1956,    504,   3384,      0,      0,      0,  -4284,  -3564,   4788,   1188,   -492,   5580,  -4428,  -2256,   3684,  -5628,  -3156,  -3672,  -2544,  -6156,  -1992,  -7068,  -8172,    996,  -6660,  -7692,  -3180,  -5268,  -6960,      0,  -6576,  -1692,  -2736,  -6228,  -7452,  -2208,  -6816,  -5940,    900,  -7392,  -2568, -10536,  -8628,  -5052,  -6624,      0,      0,      0,  -4164, -10332,      0,  -5796,  -8064,  -4752,  -6468,      0,      0, -10848,  -2484,  -9648,  -9180,  -9228,  -6096,  -9348,  -6384,  -4140,  -4236,  11700,  -4116,  -3444,   -816,   2184,  -1956,  -4476,  -2964,   2388,   -216,   3960,  -3324,  -1116,   -816,    720,   4476,      0,      0,      0,      0,  -4848,  -2280,  -2040,   4500,  -5172,   -132,  -8844,  -6876,   6252,  -8520,  -7116,  -3876,  -2820,  -4632,      0,  -9300,  -8820,    672,  -6996,  -7644,  -6000,  -2640,   -924,      0, -10104,  -3168,  -7776,  -9180,  -9900,  -2616,      0,      0,  -5592,  -4476,   5052,  -1884,  -3984,    252,    624,      0,  -3528,   -408,  -4188,  -9420,   2388,  -4296,  -6312,  -1884,  -6216,    948,  -1476,  -3492,   6324,   1956,  -3408,  -4452,    540,   -612,  -2496,   5952,  -6504,   6228,  -8700,    312,  -3312,   -444,      0,  -3228,  -7344,   2316,  -2844,   3552,  -2748,  -3036,  -4452,    108,    660,   2664,      0,      0,      0,  -1512,  -3348,  -4596,    -72,  -4884,  -2820,   7044,  11820,  10044,   5676,   6192,   4248,   7332,   2016,   6636,  -3588,    888,   -348,    804,  -2376,   1416,  -1452,  -2340,  -2328,   1632,   8436,   7512,  -4980,   -468,   2892,   4836,  -1032,   9252,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -3084,      0,  -4584,  -4596,  -3960,      0,      0,      0,  -1872,   3984,      0,  -1956,  -4188,  -3156,   2412,  -8160,  -2532,   3420,   8028,   6564,      0,   5016,      0,   7332,   5652,   7212,      0,      0,      0,    264,   2916,      0,      0,      0,      0,      0,      0,      0,   2436,  -1452,    132,  12012,  -1836,   5592,  -3684,   5532,    588,    264,   -348,    648,  -2628,  -3864,  -1548,      0,   3600,   4836,  -5880,  -2340,   -540,      0,      0,      0,  -5136,      0,      0,  -2544,  -4020,      0,  -4932,      0,   2016,   2148,   6552,      0,    120,   -156,      0,      0,      0,      0,   -780,  -3396,    648,  -1308,  -3312,      0,  -1836,      0,      0,      0,   5592,   1932,  -2820,  -3552,      0,   9324,   -180,   6636,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -5304,    564,   4308,  -2616,  -3096,  -2088,    108,  -3516,    324,      0,      0,      0,  -3936,  -3012,   1488,      0,   5076,      0,      0,      0,      0,      0,  -4428,      0,   7656,   -708,   4632,   -876,      0,      0,      0,   2784,      0,      0,      0,      0,      0,   1416,      0,  -3372,  -3828,  -2424,      0,      0,      0,      0,      0,   -348,  -1956,  -4356,   1872,      0,  -7176,   3288,   2160,      0,      0,      0,   5004,      0,      0,      0,      0,      0,      0,      0,  -4224,  -3108,   1404,      0,      0,      0,   2352,      0,      0,    720,  -2688,   4236,   6960,  -4368,   5100,  -2904,  -2232,   2412,   -372,  -1392,  -2940,  -1452,  -4020,   1740,      0,      0,      0,  -3996,  -2652,  -1824,      0,   1680,      0,      0,      0,      0,      0,  -4488,      0,    768,      0,   3600,  -5748,      0,      0,  -7800,  -4392,      0,      0,  -3984,      0,  -8148,  -8796,    108,  -6660,  -6936,  -3492,  -4044,  -6012,      0,  -5040,      0,  -3552,  -5268,  -6468,   -984, -11172, -15480,   -480,  -3768,      0,  -3768,  -3588,  -1800,      0,      0,      0,      0,  -4704, -10212,      0,  -5040,  -7296,  -3660,  -4884,      0,      0,  -3168,   6228,  -1596,  -2640,  -5796,  -2676,  -4320,  -5748,   2124,  -3876,   4056,  -5760,  -5172,  -4152,      0,      0,      0,  -3948,      0,      0,      0,  -6624,  -5892,      0,      0,      0,      0,      0,      0,      0,      0,  -9864,      0,      0,      0,  -1332,  -5028,  -4104,      0,  -8880,  -6240,  -2916,  -1836,  -3072,      0,  -9264, -10620,      0,  -7644,  -9432,  -6624,  -4884,      0,      0,  -6096,      0,      0,  -6468,  -5832,      0,      0,      0,  -3936,  -6756,      0,  -8280, -12660,  -6816,      0,      0,      0,      0,      0, -15732,      0,  -6900,  -9408,      0,      0,      0,      0,  -5304,    264,  -3648,  -6216,  -5616,   -840,  -5748,  -7080,   1824,    888,  10416,  -2004,   3996,   1812,   3768,    -72,   2028,     12,   8436,   5592,  10212,   1584,   1644,    816,   7656,   3324,   8376,   2916,   3864,      0,   3780,    444,    -24,   7176,      0,   2700,   7944,  16044,  13452,   6036,   9192,   8292,  12012,   3000,  11100,      0,   5340,   2688,   3684,   2124,   4416,    768,   3192,      0,      0,  10800,      0,   1188,   1284,   3768,      0,   4368,  11412,      0,      0,
                                      0,      0,      0,      0,      0,      0,      0,   5952,   3192,   5160,   -960,  -1776,    -84,      0,      0,      0,   5916,   7524,      0,   4500,   1476,   1668,  10500,    444,   6300,  -6288,  -2016,   5916,  -1368,  -2136,   -936,   4836,  -4236,      0,      0, -12768,   1356,  -4836,  -6588,  -3264,      0,    444,    600,      0,      0,      0,      0,  -5100,   -252,      0,  -1128,   5628,  -5064,  -7404,   -732,  -9432,  -6768,  -7164,  -4932,      0,  -3000,      0, -12456,      0,  -7296,  -8112,  -4032, -11172,      0,      0,  -5028,  -1128,  -3096,  -6816,  -7512,  -4020,  -4752,  -4596,  -1560,  -9024,  -5040, -13044, -10104,  -7884,      0,      0,      0,      0, -13704, -14640,      0,  -9516,  -9600,      0,      0,      0,      0, -11628,      0, -10068,      0,  -8868,  -3420,  -8652,  -8064,  -2676,   3252,  10896,    372,   5328,   3708,   5268,   2412,   3504,   1752,   6516,   2736,   8964,   1140,   2568,   3000,   6960,   5664,   6732,      0,      0,      0,   5928,   2256,   1884,  10500,   3756,   5160,  -6468,  -4524,   5880,  -7152,  -2760,  -1572,   9324,  -2988,   3528,  -5892, -10884,   -888,  -6336,  -7536,  -5292,  -4320,  -1500,  -2496,  -9516,  -6300,  -6636,  -9348,  -7956,    528,  -8652,  -5676,  -4248,   5628,   8688,   2688,   7188,   4584,   5700,      0,   3228,   2196,  -3804,  -3972,   3924,  -5004,  -7032,  -3660,  -5748,  -2748,  -3852,   6708,  10536,   8352,   -612,  -5124,   -528,  11184,  -4716,   8124,  -7872,  -2976,   5856,   2544,   -576,    -36,   6228,   5064,   4356,    744,   -528,   8460,  -2100,   3036,   3636,    564,   4284,   4668,   3948,   6792,      0,  10800,   5652,   8388,  10416,   4272,   6480,   2448,    -96,  10332,   3456,   6264,   4788,   8028,   1500,   8124,  -1632,  -4092,   6552,   3240,   3240,   3576,  -2232,   9348,   5076,  -5028,   4308,   1164,  -4812,   2748,   3408,  -2016,   1572,   3972,   2808,   9720,    480,   5652,  10440,   5760,      0,      0,      0,   4428,   2292,   5964,   7188,   4284,   6612,   4056,  12372,   3672,   4320,   9372,   7008,  11700,   4944,   7296,  10896,   2736,   6420,  -1908,    -96,   7920,      0,   7188,      0,  11820,      0,      0,      0,      0,      0,      0,  10416,   8568,      0,      0,      0,      0,      0,      0,   8064,   7872,      0,  16044,    828,   9696,  -3168,  -2976,   5112,   6936,   4716,   2700,   5532,    924,   4440,  -1920,   7500,  10800,   2544,   8052,   4308,      0,   6408,      0, -10224,    108,    792,  -2256,      0,   3324,  -7404,    156,   4812,  -9900,   6528,  -2532,  -3876,   1272,      0,      0,  -2628,      0,  -6768,  -5760,   7836,  -3996,   3528,  -1704,  -4104,  -2808,      0, -12168,   4008,   -816,  -6876,   2100,    732,  -4524,  -2052,   2916,    348,   9720,  -4032,   3600,   7788,   3528,      0,   4044,   2016,      0,      0,      0,      0,   8316,   4704,      0,  10656,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   2640,   6528,   2904,  -1332,   7656,   3576,   6552,   2208,      0,      0,    720,   3072,   3264,   4248,   3732,      0,   5148,   2820,  -4212,   1260,   -240,  -2568,    984,   3072,  -5040,  -2364,  -1764,   2016,   6768,     60,   6804,  10236,   3192,      0,   2808,      0,   2256,   1740,   6684,   2292,   2316,   4092,      0,   9456,  -4368,   2556,   7440,   3420,   5052,   4620,   7800,   8688,   4836,   6048,  -6324,   -528,   3348,  -2676,   2652,  -2772,  -2844,  -9792,   1524,      0,      0,      0,   1704,   8700,   -312,      0,  -3408,      0,      0,      0,      0,   3192,  -1068,   7452,   5592,  -7128,   1800,  -1992,      0,      0,  -1968,   5412,      0,      0,      0,      0,      0,   5772,   5208,    396,   7908,   4740,      0,      0,      0,      0,      0,  -5196,  -2556,   1572,   2244, -12768,   -432,   4152,      0,      0,      0,      0,   5112,      0,      0,      0,      0,      0,  -3948,      0,  -1080,   3444,   3132,      0,      0,      0,  -2256,   7932,      0,   -216,   -768,   2700,   2736, -12480,   2220,  -9444,  -4092,   1356,   2400,   -240,   -888,    888,  -1416,   2772,      0,   5772,   4500,  -4044,   2724,    -12,   1416,   1896,    420,      0,      0,      0,   2088,    804,   5544,   5340,  -4608,   2940,  -6192,   7500,   5304,   1860,   6120,   4560,   3600,  -2436,   1812,  -8256,   5088,   4752,    648,   4176,    768,  -8796,   -852,   1092,  -9228,   2088,   1608,  -8172,  -1104,     96, -12456,  -6768,  -1464, -11112,    720,  -4692,  -7656,   -516,  -1320,      0,      0,      0, -11928,  -3936,   1596,  -9852,  -3156,  -2124, -10620,      0,      0, -12372,    756,  -3912,  -8820,  -6252,  -5376, -10884,  -7596,  -1404,  -9192,   2292,  -7212,  -5976,  -1728,  -3036,  -3084,  -6552,  -4716,      0,  -3948,      0,  -4116,   1368,  -3756,      0,   3504,      0,      0,      0,      0,   1260,   -564,  -2916,   3192,      0,  -1908,  -9888,  -5760,   2508,  -2796,  -3336,  -3612,  -3396,  -1980,  -2040, -11604,  -3936,  -2412,  -5952,    984,  -2088, -10212,  -2460,  -3264, -11568,  -1800,  -9432, -10332,  -3600,  -3828, -14640,      0,  -7332,  -9816,   1740,  -5388,  -6240,  -1800,  -2664,      0,  -1356,  -7548, -10980, -11016,   1356,  -7824,  -5148,  -2892, -15732,      0,      0,  -8256,   3492,  -2400,  -9420,  -1068,  -1020,  -3972,  -5160,   1488,  -2400,   6792,  -1164,   1164,   7860,   1488,      0,      0,      0,      0,      0,      0,    708,  11172,      0,      0,      0,      0,      0,      0,      0,      0,   -252,      0,   3864,  -4776,   1884,      0,      0,      0,      0,   8376,      0,      0,      0,      0,      0,      0,      0,      0,  12156,      0,      0,      0,      0,      0,      0,      0,      0,  11568,      0,      0,  13884,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -1692,   4308,   6444,   4656,   8784,   7140,   8436,  -2112,   7788,      0,      0,   5484,   2412,  11088,   2340,      0,   9456,   3408,      0,      0,      0,      0,   5244,      0,  10800,      0,   7044,    840,    108,   7404,    276,   9756,   6852,      0,      0,   7152,      0,   2088,   6288,   -204,   7320,   6276,      0,   3576,      0,      0,   8604,   1392,  -1692,   3048,   3264,  -1128,   1092,   4344,  -5496,   1260,  -3576,      0,   4068,   1272,      0,      0,      0,  -1440,  -1800,   3216,  -1272,   1860,  -2472,      0,      0,      0,  -8232,   3912,  -4416,  -3168,    612,  -3216,  -6300,   -300,   2256,   1320,   9372,  -1500,   3804,  10428,   4176,   3984,   1152,   -480,      0,   7932,   7092,   6936,  12528,   2784,      0,  10764,      0,      0,      0,      0,   4428,   9684,    216,   7524,      0,   3384,  -1008,   4008,   7872,   1248,   5472,   1620,   5592,   3372,   7368,   -996,    756,   2808,   1848,   4464,   2340,   6228,   4284,   9228,  -4920,   3912,  -2232,  -2484,   1872,   2784,      0,      0,  -1848,   2976,   7440,    -24,   8436,   9156,   3204,      0,      0,   3168,   3936,   3492,   8580,   4092,   4332,   6084,    264,  11472,      0,   3780,  10620,   3420,   6324,   6168,   7812,  10536,   5868,   6084,  -6396,   -576,   5760,  -1416,   -144,   2760,  -3312,  -1560,   4752,   -504,   2652,   7476,  -3156,   2280,   3108,  -3096,    264,   3048,   -948,   7860,      0,   -624,   -264,   3372,   1812,  -2220,   6648,   5352,   7188,  10248,   4188,   8736,   6060,   5016,   1116,   9132,  -4476,   -240,   6156,   3192,   5028,   5604,  -1392,   4728,   5436,  -4164,   8784,   3468,  -4944,    912,   5652,  -2136,  -2292,   9888,  -1392,   7788,  -1764,   3828,   3312,   5100,      0,      0,      0,     12,  -1728,   6024,   -288,    108,   3360,  -4152,    108,   1260,   -900,  10428,    996,   -816,    432,   3612,   3708,  -2844,   6876,     60,   6264,   9336,
                                   8172,   8736,   7764,   6192,   -816,   8844,   4188,   5412,   5628,   3624,   7920,   7368,   2784,   1296,   6900,     84,   8376,      0,   4356,   2676,   8724,   9192,   -840,   8676,  -2832,   4716,   8748,   2472,   3924,   6240,   -348,   -420,   7248,  -1212,   6120,   7068,   -360,   3600,   4860,  -4392,    396,   6792,  -4812,   9756,   3504,  -3156,    420,   1536,  -6768,   -960,   5916,  -5760,   7656,   -804,  -5592,   1560,   5028,      0,  -5232,  -2772,  -6888,  -3336,   6204,  -3564,  -1332,   2820,  -6240,   -252,  -2676,  -8208,   5472,   -672,  -7116,   -732,  -2016,  -2760,  -3084,   7188,  -3540,  10440,  -2952,   3288,   3312,   6084,      0,  -8160,  -4716,   3564,   5112,   8604,    768,   2712,   -240,   5004,   2160,   4920,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -2976,   1272,   9192,  -4308,   1560,   1620,   -156,  -3360,   5772,  -2736,   -516,   4728,  -2712,  -1176,    348,  -1800,   1224,   2892,  -6996,   4068,    120,  -5052,  -3204,    840,  -7884,  -8904,    720,   -792,  10236,  -1128,   5208,   4584,   4584,      0,   1872,  -1596,  -1740,  -1800,   5604,  -1464,   -780,   2676,  -6816,   -168,  -1896,   -792,   9156,    684,    252,   1296,   3744,   4584,  -2580,   7368,  -5280,   3036,   6972,    -60,   2280,   4428,  -3036,   -192,   4524,   2280,   8700,  10368,   -888,   7848,   4356,  -3012,   3864,   8604,  -1248,  11172,      0,  -1188,    516,   2544,   1644,  -1500,   6708,    120,  10416,   9972,   2388,   7920,   7428,   2916,   -540,   7776,  -3264,   2724,   6924,    852,   4764,   5496,  -2652,   1944,   6408,  -3156,  11088,   3780,  -4212,   1572,   3468,  -6588,  -3744,   7620,  -4008,   8316,   2676,   1452,   2712,   5304,      0,      0,      0,   1032,   1368,   6000,   -732,    804,   4752,  -5892,  -4320,   2544,   -504,  12528,   4788,  -1116,    420,   3648,   2568,  -1512,   6612,  -4200,   3240,   8232,   3756,   5028,   6276,  -2376,  -3216,   5880,    204,   7908,   9096,  -2736,   4764,   5376,  -3828,   -780,   7152,  -2136,  12156,      0,   -876,    960,   5808,   2124,  -2436,   7752,  -5148,   8052,   8160,   -480,   3600,   6024,  -2340,  -2400,   6204,  -5820,   4176,   7560,  -4164,   -180,   2508,  -6936,  -4932,   4644,  -6792,   7320,   3204,  -7692,  -3924,  -1440,  -8112,  -8556,   5616,  -7500,   4248,   -876,  -7536,  -1176,   3624,      0,  -9828,    552,  -7152,    984,   6564,  -7908,  -5736,   -504,  -9432,  -8736,  -2748,  -8796,   4464,   -252,  -7644,  -5580,  -4752,  -7536,  -2940,   4008,  -7380,   4284,  -2436,  -4524,    108,   1824,  -4596, -10248,  -2316,  -3888,   3444,   5916,  -5292,    804,  -1848,  -3108,   2028,   5280,      0,      0,      0,  -5052,  -3180,  -1512,  -1776,  -7524,   3516,  -6456,   3528,   8604,  -3744,  -1332,   2328,  -3312,   -564,   5316,  -7908,  -3156,   3324,  -7368,  -5736,  -3324,  -7296,  -3804,   2244,  -8988,   1860,  -4116,  -8064,  -8976,  -2976,  -9600, -10500,  -1236,  -7572,   2316,  -2172,  -4284,   -780,   1524,      0, -11280,  -3552,  -8124,  -5148,   6540,  -7104,  -8868,  -1332,  -9408, -10632,  -1608,  -7620,   4332,   1056,  -6312,  -2796,   -804,  -7032,  -3360,   4620,  -8460,   5652,  -5484,  -5400,   -264,   1080,  -3348,  -7260,  -3240,   -324,  -1068,   8196,  -5736,    516,  -1848,  -4428,   4908,   7164,  -3720,   -252,      0,  -2124,  -5592,  -3972,    444, -10644,   -504,  -1356,   7872,   9180,  -1800,   2676,   2220,  -1452,   -624,   7344,  -6492,    804,   1236,  -2808,    960,   2196,  -4488,   -648,    492,  -4212,   5244,   3552,  -3564,   2388,   4068,  -5100,   2988,   8760,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -1344,   -564,    744,  -3840,  -3180,  -3240,  -9864,  -2856,  -2868,    864,   9684,      0,  -2280,  -4224,  -3804,   2256, -11196,   1884,  -6216,   2748,   7884,   1500,    912,   5940,   -468,   3432,   7500,   -108,   1572,   6000,  -4764,   1572,   2856,  -4356,   2712,   5088,   2628,  11568,      0,  -1620,   2388,   3912,   1284,   1320,   8160,  -6036,      0,   4884,  -4008,    420,   1020,  -4020,  -7764,   1440,  -7404,  -1104,   3840,  -6348,  -3924,  -1536,  -6468,  -5808,  -1200,  -8616,   3048,   -828,  -7452,  -4440,  -3528,  -7512,  -5568,   1932,  -7092,    984,  -8208,  -8520,  -3204,  -1224,      0,  -9792,  -5712,  -8532,  -3600,  -1908,  -8076,  -8976,  -5916,  -5832,  -3612,  -6624, -11412,   1872,  -7908,  -9900,  -9408,  -8952,  -7956,  -2748,   -624,  -7488,   4944,  -4452,  -4560,    432,   2184,  -4188,  -8292,  -2964,  -3120,   -768,   5484,  -4056,    420,  -2652,  -2688,   5736,   6696,      0,      0,      0,  -1680,  -4224,  -3828,   1476,  -8340,  -1176,  -8004,   2100,   8220,  -6084,   -732,   2256,  -3552,   3972,   7092,  -8136,  -6252,   -204,  -6528,  -5580,  -5520,  -5796,   -540,   2292,  -9564,    612,  -6492,  -9228,  -9408,  -3672,  -8868,  -4668,  -5688,  -7128,   4620,  -2640,  -5316,   1296,   1500,      0,  -6048,  -3000,  -3924,  -1068,   6936,  -5604,  -2796,    852,  -5616,   -672,    936,  -7344,   6168,    876,  -4452,    -24,    780,  -5124,    204,   5820,  -5820,   5064,  -8124,  -6600,  -1560,   1728,  -3228,  -6540,  -4752,   1284,  -9792,   9204,  -5844,   -192,  -5016,  -3516,   7584,   8352,   -372,      0,      0,  -2040,  -7260,  -5784,   2028,  -5616,   -444,   2700,      0,  11208,   1128,   -816,   3180,   5652,   5148,   7428,  -6960,  -1416,   -744,  -2100,  -3216,   1956,  -4020,  -2412,   1656,  -2112,  -2112,  -2520,  -1008,   3432,    804,  -4236,   5232,  10680,  -2460,   4044,  -4488,   -660,  -8160,      0,      0,      0,      0,      0,  -6552,      0,  -3204, -10248,  -4968,      0,      0,      0,   -672,   1152,  -3948,  -4476,  -8292,   -828,   3504,  -7428,    444,  -1344,   1500,   9972,   4224,   1116,   1968,   2016,   5148,   8676,      0,      0,   3336,    120,   -540,   3984,      0,    900,   5364,      0,      0,      0,      0,   -624,      0,   3000,   6264,  10728,  -2496,    924,   4500,  -1848,   -420,   4452,  -3864,  -4260,      0,  -1152,  -2436,   5976,  -4704,  -2400,   -924,  -3984,    540,      0,  -8304,      0,  -4956,  -6156,  -7764,   1176,      0,      0,   1188,  -2100,   2208,  -7908,      0,  -3360,      0,      0,      0,      0,  -5628,  -1980,      0,  -1680,   -564,   1104,  -3072,      0,      0,  -9048,   3372,  -5124,  -4632,   3972,  -4956,  -2988,   3924,   9456,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -2628,      0,      0,  -5232,      0,      0,      0,      0,      0,      0,      0,  -8832,  -9828,      0,      0,      0,      0,      0,      0,      0,      0,  -9792,      0,      0,      0,      0,  -1260,   2808,  -1908,      0,   1872,      0,      0,      0,      0,      0,  -1356,      0,  -5268, -11280,      0,      0,      0,      0,      0,      0,      0,  -3528,  -6048,   -288,   3228,  -5112,   3000,  -2040,   4284,  10236,     72,    264,   6372,    660,   7584,   8292,      0,  -3408,  11568,   1920,   3864,   7152,   5076,   9852,   8916,   1404,      0,      0,   1260,   4908,   6228,   3324,   8544,  11628,   4452,      0,  13548,   4020,   1296,   8484,      0,    900,   7512,   1320,   1896,  10836,    396,   -780,   2520,   1680,   4200,      0,   2628,   9456,   3648,    504,   2712,   2388,    444,   4932,   9192,    516,  10656,  -5160,   1404,   2160,      0,      0,      0,      0,   3060,   3504,      0,   3636,   2028,   9276,      0,      0,      0,    300,  10764,    804,   4476,   5736,   5460,   5664,   5400,  10452,   -672,   9348,   8676,   2640,   4728,      0,  -2340,  -2412,   5688,      0,      0,  11736,  -1572,   1944,   3132,      0,   4200,      0,      0,      0,      0,   -516,   -648,   8268,   3192,  -2688,   5724,   1776,   6408,  13620,  -5172,
                                    396,   4440,      0,    540,   9576,  -2904,   -852,   6564,  -3072,  -4932,  -3444,  -6012,  -8040,   7968,  -2832,   3576,  -4368,  -6960,  -5808,  -3780,      0,      0,   6780,  -1476,   5148,  -6120,  -6408,   1224,   4464,      0,      0,      0,  -3600,  -2460,   6804,  -2448,  -3804,   1200,      0,      0,      0,  -5340,   4284,  -2892,   -924,   -540,  -3864,  -1500,   3852,   8244,  -3276,  12372,  -1848,  -3396,    108,   3468,      0,      0,      0,      0,      0,      0,  -4548,  -4320,      0,      0,      0,      0,      0,      0,      0,      0,  -2856,      0,      0,      0,      0,  -3348,  -2808,      0,  -4080,   -252,   1944,      0,      0,      0,      0,      0,      0,  -5472,  -8736,      0,      0,      0,      0,      0,      0,      0,      0,  -3612,      0,      0,      0,      0,  -2040,   9456,  -5448,  -9744,   -168,      0,      0,      0,      0,      0,      0,      0,      0, -10632,      0,      0,      0,      0,  -2772,  11472,    408,    948,   -672,   5844,  -2748,   3216,   5052,  -6660,   4272,  -8940,  -7296,  -2220,   -324,  -4884,  -5616,  -6300,   1200,  -7128,   7956,  -3528,  -1500,  -6168,   -708,   8544,      0,      0,  -4776,      0,  -6048, -10644,  -8448,      0,  -6924,  -3096,   2472,    828,  11016,  -2976,   -840,   -984,  -1836,   6264,   5748,  -2988,  -4608,      0,  -4236,  -2436,   3684,      0,  -2688,      0,  -2340,      0,  -3048,   -492,   1320,    876,  -1128,   8184,   5088,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -8796,  -7524,      0,      0,      0,      0,      0,      0,      0,  -5172,  -8340,      0,   3756,  -9408,  -1068,  -2712,   1572,   9744,  -3036,  -2292,   4572,  -1032,   5232,  11160,  -3504,   -432,   3060,    720,  -3744,   3756,  -7176,   4932,   4836,      0,  13884,      0,      0,   2988,  -4188,   4368,   8184,  13788,  -4884,    156,   4680,  -3672,   -960,   1200,      0,      0,   6372,  -8064,  -6768,      0,  -6120,  -8556,  -4356, -15480,      0,      0,  -6192,   1092,  -7476,  -5940,  -5568,  -7236,  -4596,   2676,   2028,  -7092,  -2364, -14748,      0,  -8904,  -4416,      0,      0,      0,      0,      0,      0,      0, -10500,      0,      0,      0,      0,      0,      0, -10284,      0,  -4668,      0,  -5676,   5328,   4344,  -7272,   2736, -10584,  -7128,  -2844,    348,  -8160,  -7428,  -7608,  -4740, -12480,   3672,  -7416,  -1512,  -8796,  -4368,   5400,   3084,      0,      0,      0,  -6792, -11196,  -6012,    444,  -9408,  -2964,  -2928,  -2052,   9480,  -4212,  -3084,   1404,   -180,   3924,   8568,  -7368,  -7596,   1560,  -4848,  -2940,  -4368,  -5748,   3852,   -936,  -8148,   -300,  -7980,  -6384,  -2748,  -1932,  -8064,   5328,    672,  -6972,   4836,  -9840, -10128,  -2580,   -144,      0,  -5112,  -5892,  -5244,  -5160,   7560,  -6312,  -3360,   -552,  -7080,   3216,   2652,  -6252,   5868,  -6564,  -2496,    204,  -1272,  -4716,   2928,   6540,  -7992,   5856,  -9816,   1032,   5760,   1944,  -8700,  -8124,  -8292,   3528,   3348,   6480,   2436,   6972,   1764,   4308,  10236,   5304,  -4416,  -1164,      0,  -5280,  -5484,  -6216,  -2004,  -8940,  -5076,   5772,   7920,  10296,    600,   9336,   4848,   6564,   9972,   7428,    492,   1356,   3300,   4788,   8232,   5412,   2412,   8676,   3024,   1452,   6444,   6216,   2796,   7884,   7908,   5916,   9744,   9612,  -5028,  -4032,  -9120,  -1908,  -2952,  -3432,      0,      0,      0,  -4740,  -7212,  -3948,  -5556,  -2436,  -3024,  -5760,  -1848,      0,  -3888,  -1500,  -2772,  -4116,  -4452,  -4116,    372, -10584,  -2808,   5568,  10332,  10296,   5412,  10248,   9552,  10044,  11208,   9636,      0,      0,   5844,   3756,   9972,   8184,      0,  13548,  10068,      0,      0,      0,   7152,   9180,   9036,  13452,  11016,   9684,   1080,   5112,   4308,   4368,   8748,   4812,    588,   4500,   3984,      0,   5304,   9696,   4140,   8160,   4296,      0,  13620,      0,   -540,   7404,   3276,   3684,   4884,   6996,   -732,   4680,   4332,   3456,   2904,   -324,  -1200,   9192,      0,      0,      0,      0,  -2016,   2508,   7560,   6024,   8604,   3864,      0,      0,      0,      0,   7872,   3996,   6252,   8220,   8208,   5880,   9480,   9984,  -5664,    480,  -9120,  -1536,  -1764,  -3036,      0,  -4488,  -7416,      0,      0,   4248,  -2340,   2676,  -2952,      0,  -5160,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -1332,  -2532,   -324,  -8184,   -804,  -5928,      0,  -7908,      0,  -7236,  -4692,  -3384,  -4128,   -876,  -2892,  -3768,  -6120,      0, -12096,  -3576, -10752, -10536,  -8208,  -3540, -13044, -14748,  -6504,  -2640,     60,  -6096,     60,  -1128,  -3504,      0,  -1908,  -4572,  -4104,  -5388,  -2364,  -4584,  -2172,  -4668,  -8280,  -5448,      0,  -2232,    -24,   -948,  -1884,  -2640,  -2340,   2688,  -9840,   -216,   -924,   8460,   6480,   1896,   7476,   4644,   3552,   9204,   3768,      0,      0,      0,   4872,  10368,   7056,      0,  11568,      0,      0,      0,      0,   5772,   8196,   9960,  10212,   7956,   7152,   3708,      0,   5844,   1776,   5628,    300,      0,   3336,   6024,      0,   4500,   7464,   5796,   9096,   3432,      0,  11736,      0,      0,   5484,   -372,   1692,   6000,   5892,   1356,   3060,   5256,   2736,      0,   4248,   3204,   8604,      0,      0,      0,      0,      0,      0,      0,   3180,   5916,   4560,      0,      0,      0,   4056,   7092,      0,   3960,   5484,   7476,   8964,   3672,   5088,  -2376,   6552,   3300,   3816,   6156,   1056,   -348,   -744,    504,      0,   5208,   7464,    972,   6924,   3444,      0,  10836,   6096,      0,      0,      0,   -768,   1236,   3648,   2688,      0,   4008,   1920,  10800,   9696,   -636,   7068,   3768,   4836,   5976,   4968,  -3060,   4752,   4932,   2052,   7560,   5544,    108,   6564,   4812,      0,   6288,   3264,    996,   3840,   6168,      0,      0,   7116,  -5184,   3072,  -3384,  -6516,   4728,      0,      0,      0,      0,      0,  -2412,   3228,  -2676,   3324,   1596,      0,      0,      0,  -7476,   2808,  -3156,    672,   -204,  -1572,   -888,   1560,   2112,  -1308,   5964,  -3948,    540,   6024,      0,      0,      0,  -2664,      0,      0,      0,   1200,   6000,      0,      0,      0,      0,      0,      0,      0,      0,    744,      0,   5160,      0,   4044,  -1728,   7836,   7560,    636,   6204,   1308,    648,      0,      0,      0,   1596,   3228,   4548,   6564,   2232,      0,   6804,      0,      0,   3216,      0,      0,  -1908,      0,      0,      0,    168,  -2388,   6684,  -2364,      0,   5604,      0,      0,      0,      0,      0,   1356,      0,      0,   6540,      0,      0,      0,      0,   4284,   8580,   3096,   2388,   6936,   4548,   3924,   7560,   6600,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -1200,   1164,   6216,   4164,   3468,   2844,   7512,  -2520,   6492,   2952,  -5196,   -372,   1656,   3780,   3372,   -348,   3648,  -1236,      0,      0,      0,      0,   3552,   2796,      0,  -3048,   5976,  -1920,    792,   3276,    600,   3504,    672,      0,  -4956,   -540,  -1020,   1608,   3264,  -1644,   3204,   3648,  -3552,  -4368,      0,  -2832,   1392,  -1200,  -2736,   -828,  -1428,  -3096,  -7476,   1356,  -7128,   -240, -10752,  -2268,    120,
                                      0,      0,      0,      0,  -3468,  -9432,      0,  -4848,  -4116,  -1776,      0,      0,      0,  -9924,  -2232,  -9588,  -7776,  -6492,      0,  -6636,  -7980,   -708,   1260,   7008,  -2772,   2676,    996,    768,      0,  -3948,  -1164,      0,      0,      0,   -876,   4788,    456,      0,    804,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -6036,   -816,   3996,  -7428,   -672,   -444,   1932,  -5124,      0,  -4884,  -3912,  -3156,  -3900,   -252,  -3792,  -1596,  -2892,  -1872,  -9372,  -4416,  -9588,  -9648,  -7908,  -6888, -10068, -10284,  -6684,   2496,   3420,   -948,   3804,    684,   3096,      0,      0,      0,    492,  -2400,   3096,  -1764,   1056,  -1584,  -3648,    408,  -4248,   3900,   3420,      0,   1956,    876,   -720,   8352,  -6564,   5424,  -7620,    -36,   1944,  -2436,   2760,   -228,   -444,   1728,   1308,  -1464,  -2772,   4644,  -1068,   4428,    960,  -2088,   6372,   1464,  -3672,   1488,      0,   1776,   1080,   2532,   3768,   -324,   4008,   1584,      0,   9552,   2496,   7764,   3348,      0,   1968,   6240,      0,   -888,   1056,   3972,   6276,   4740,  -2940,      0,      0,    312,   7140,   2844,  -1212,   5940,   8304,   -936,   4572,   7356,    -36,   3528,  -3036,   2616,   6084,   2184,      0,      0,      0,    396,  -3036,      0,   -564,   1824,   2688,      0,   3468,      0,    300,   4176,    768,   2184,   2184,   4104,   5268,    348,   3108,     84,   4788,   4848,   3552,   6060,   3348,   4248,   3180,   3108,      0,      0,    300,   1056,   7428,   2400,      0,   8484,      0,      0,      0,      0,   3576,   2220,   3564,   8292,   -984,   4404,  -2004,   2700,   4812,    -24,   6240,   2964,    648,   4452,   4296,      0,   4560,   3768,   -816,   6024,   4200,      0,   4440,      0,  -1188,   6852,    672,  -3672,   1020,   1932,  -7164,   1200,   3720,  -5568,   3576,  -5928,  -7848,   1620,      0,      0,      0,      0,  -7884,  -3612,   1308,  -4596,   2328,   1260,  -2916,   1944,      0,  -6792,   1620,   -444,  -3876,   2256,   1548,  -1572,   1404,   4176,  -1692,   5760,  -3432,  -2364,   5100,   2184,      0,      0,  -4968,      0,      0,      0,    804,   5304,   1488,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -6252,   5028,      0,      0,      0,      0,  -3192,  -1320,      0,   -948,   3624,      0,      0,   4464,      0,      0,   1272,      0,  -6624,  -1224,   3180,      0,  -4416,      0,     60,   3192,  -3504,   2556,   4584,   5508,      0,      0,      0,  -2736,  -2664,      0,   -168,   1524,   2832,      0,      0,      0,   -696,   3204,   3096,    624,   1500,   2832,   5700,   -144,   3972,  -5580,   3636,   1764,  -1416,   3108,    960,  -4452,  -5016,   -132,      0,   -312,   7056,    612,   4356,   1752,   1488,   7152,      0,  -5880,      0,      0,  -1824,  -1848,   -924,    816,  -6168,   2016,   3936,   8568,   8184,    180,   7368,   2400,      0,   3984,   4524,  -2784,    -12,   3444,   2904,   5376,   1452,  -1824,   3132,   5196,  -2028,   2340,   3372,   3120,   2856,   7656,  -3264,   3756,   5316,  -4284,   4704,  -2952,   1296,   -240,   1488,      0,      0,      0,  -2076,  -3756,      0,  -3384,  -1848,  -1152,      0,      0,      0,  -2160,   2784,    456,   -816,  -2652,    120,   3000,  -8796,   1944,  -1368,   3576,   5412,   2208,   5604,   4740,   1416,   1956,   2700,   1008,   4740,   3432,   -300,   5496,   1452,  -2424,   2520,   5424,      0,      0,      0,    960,   2196,   4704,   4416,   3684,   6276,   -300,   4308,   4296,  -2340,   4860,   4200,   -540,   -924,   2664,  -2028,    768,   5544,  -1368,   2508,   4380,  -3492,  -3444,   4764,  -3300,   6276,   3648,  -3180,  -1536,   1548,  -4032,  -4356,   4356,  -4008,   3732,  -2892,  -5784,    348,      0,      0,      0,      0,  -3924,  -2088,   2232,  -7236,  -3324,   2580,  -6624,      0,      0,  -6012,   2340,  -3792,  -6000,  -5520,  -4404,  -5292,  -4368,   2508,  -2724,   6612,  -3024,  -3720,   3360,   2688,  -3960,  -4968,  -2100,      0,   3132,   4560,  -1740,   4752,  -1152,   1404,   9276,      0,      0,      0,      0,  -1644,  -3240,   3528,    -84,      0,   -828,  -3060,  -1704,   3864,  -6096,   2820,   1260,      0,   1104,      0,    624,  -2124,   1596,  -3576,   -504,   2580,  -3660,   1200,   1344,  -6204,  -2472,  -1776,  -4752,  -5916,    996,      0,      0,   -876,  -2208,   4092,  -4668,  -3804,   2676,   2832,      0,      0,      0,  -3672,  -2892,      0,  -3060,  -1332,    672,      0,      0,      0,  -3732,   6084,  -1584,  -1884,    852,   2424,  -3660,   -552,   3816,  -3444,   8388,  -6216,  -1992,   3372,   2532,  -4596,  -5784,  -4704,      0,   7452,   9960,   1164,   2544,   -924,      0,   6228,      0,      0,      0,      0,  -1668,  -3972,  -2700,    -24,  -8448,   -828,   6516,      0,   9036,   1464,   8724,   3564,    132,      0,      0,      0,   5544,   3648,   4680,   5808,   4704,      0,   8268,    540,   3816,      0,   2796,   4788,   3912,   6708,   -252,  -4188,   6600,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -2916,      0,  -2784,  -1512,   3528,      0,      0,      0,      0,    216,      0,  -2040,  -3828,   -720,   1884,  -6012,   2532,   1728,   3408,   7908,   3420,   5652,   8304,   2892,    804,   6444,   5268,   2244,   5892,   3852,   3468,   7656,   1872,   2388,   3480,      0,      0,      0,   3252,   4068,   6708,   3768,    876,  10632,     36,   3324,   6996,  -3816,   1536,   1932,      0,   1176,   4896,    240,     96,   6168,     48,  -1440,   1548,   -984,  -3780,      0,   -804,   3264,  -1428,  -2208,  -3528,  -2508,  -4020,  -7236,   4932,  -1584,   3072,  -3540,  -3276,    840,   3180,      0,      0,      0,  -2112,  -3828,      0,  -1440,  -2976,    996,      0,      0,      0,  -6828,   2784,  -6888,  -2616,  -3672,  -3684,    528,  -1932,   2520,  -1164,   7296,  -4116,  -1068,   3612,   4104,  -3156,   -828,  -2136,   3024,   2700,   7476,   1872,   3648,    120,   4236,   5460,   7380,      0,      0,      0,   1920,  -3804,   -720,   1668,      0,    444,  -1224,    732,   8208,  -5496,  -2016,   1548,      0,  -4956,      0,  -2952,  -5376,  -1572,  -4152,  -4752,  -4404,  -2676,  -3864,      0,      0,  -3216,      0,  -6096,  -8952,  -3684,  -3420,      0,  -5832,  -1272,   7800,  -2340,   -288,   3744,   2832,      0,   -288,  -1596,    480,  -1020,   4548,   -816,   -804,   2424,   -840,   5844,  -1392,   -180,   7812,   -720,    540,    780,   1020,   -528,  -1272,   6216,  -6996,   4356,  -8292,   -804,   4752,   1308,  -7344,  -4752,  -6012,   3396,   1524,   3768,     84,   4524,   -132,    324,   8292,   2976,  -4236,      0,      0,  -2328,  -3240,  -4704,     12,  -6300,  -3348,   5580,      0,   9636,   3612,   8844,   3108,   7212,   8676,   6168,  -3108,   2772,    504,   2532,   5880,   2700,   1740,   5688,   1248,   6192,   7788,   6492,   3732,   7500,   6444,      0,  11160,   9552,  -4944,   2016,  -7416,  -3084,  -4716,  -4968,      0,      0,      0,  -3048,  -4716,  -2664,  -4188,  -2316,  -2100,  -3948,      0,      0,  -2232,   -480,  -1164,  -2964,  -2964,  -2136,   1752,  -7608,  -2124,   3156,   8124,   7428,   1668,   9132,   6240,   6636,   7428,   6168,      0,      0,   6024,   4716,   7776,   4524,      0,   7512,   4644,      0,      0,      0,      0,   7344,      0,  11100,   5748,   6156,     24,   4440,   3984,   -276,   7248,   4296,  -1548,      0,   2712,      0,   1812,   4968,    780,   6204,   2664,      0,   9576,   7452,      0,   7152,   -540,  -1992,   1440,   4896,  -3000,   6372,   6384,   -312,      0,      0,      0,   5772,      0,      0,      0,      0,      0,  -2040,      0,      0,   5316,      0,      0,      0,      0,      0,   7368,      0,      0,   7092,      0,   3528,   8568,   7068,      0,      0,      0,      0,      0,      0,
                                      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -2688,      0,      0,      0,  -2772,      0,      0,      0,      0,      0,      0,      0,      0,    552,      0,      0,      0,      0,      0,      0,      0,      0,  -5712,      0,      0,      0,      0,  -1044,      0,  -4572,      0,  -1596,      0,      0,      0,      0,      0,  -7548,      0,  -3780,  -3552,      0,      0,      0,      0,    156,   3168,      0,   -408,  -3000,  -1596,   2196,  -5892,   1176,  -3180,   4668,   5304,  -1176,   3048,   1464,   2664,   8352,   2976,      0,      0,      0,   2496,   8604,      0,      0,   8916,      0,      0,      0,      0,      0,   7164,      0,   8376,      0,   5688,   1464,      0,  10068,   3492,   6900,      0,      0,   5364,   4644,      0,    420,   6096,   1260,   7152,   5424,      0,      0,      0,      0,   3408,  -1236,   3384,   5088,   3480,    600,   4836,   5748,      0,      0,      0,      0,   4920,      0,      0,      0,      0,      0,      0,      0,      0,   5280,      0,      0,      0,      0,      0,      0,      0,      0,   6696,   7380,   6732,   3084,   4080,   -684,   5076,   3024,    720,   5436,      0,  -2328,   1656,   1248,      0,      0,      0,  -4104,   6408,   5196,      0,      0,      0,      0,      0,      0,   1992,    492,    540,      0,      0,   2028,   2880,      0,      0,  -1896,   6792,      0,      0,      0,   7452,      0,   1092,   4812,   -264,   4644,   4764,      0,   7968,      0,      0,      0,      0,      0,  -1200,      0,      0,      0,   6408,    744,   2820,      0,      0,   2892,      0,      0,      0,      0,      0,  -3264,      0,    420,   2244,   1344,      0,      0,      0,      0,   9228,  -1872,      0,   2292,      0,  -2496,   -936,   1992,  -1560,   3672,      0,  -4992,   1260,      0,      0,      0,      0,      0,      0,      0,      0,   2544,      0,      0,      0,      0,      0,      0,      0,      0,  -2868,      0,      0,      0,      0,      0,      0,      0,  -7872,  -2676,      0,      0,      0,      0,      0,      0,      0,  -3432,  -2748,      0,      0,      0,      0,      0,      0,      0,      0,  -6624,      0,      0,      0,      0,      0,  -4368,      0,      0,  -1896,      0,      0,      0,      0,      0,      0,      0,      0,  -1608,      0,      0,      0,      0,  -5364,      0,  -4248,  -1476,    936,  -1392,  -3852,   2652,   5352,  -2868,   6480,  -5076,   1692,   6648,   4008,  -2820,   -444,  -3348,   4884,   1800,   7152,   1464,   6708,   2016,   4632,  11628,   5688,  -1716,   1884,      0,   -168,   -504,   -828,   2700,  -3096,    420,   5220,   9696,   9684,   2964,   8676,   4404,   5592,  10728,   6156,  -2244,   2940,   4008,   3276,   7752,   6276,   3600,   5724,   2028,   4932,   7044,   5976,   5580,   8160,  10632,   5628,  13788,   9240,      0,      0,      0,      0,      0,      0,      0,      0,      0,   1764,  -1908,   4044,   -648,   3516,   -828,  -1332,      0,      0,   2184,   3384,      0,   -132,  -1176,    444,   5160,  -2964,   2400,    996,   3972,   9612,   2700,   9888,   7356,   9252,  10680,   9552,   1824,   4152,   5256,   2208,   7620,   5316,   3288,   9192,   5748,      0,      0,      0,      0,   8760,   6600,  11412,   5088,   9240,    -36,   4812,   4332,   -792,   5916,   3720,   2016,   1188,   6384,  -4164,  -1464,   7116,   -708,   5616,   4356,   -480,   6780,   6408,  -2616,   4344,   1356,    900,   1932,   4932,  -1560,   2028,   3348,  -3252,  -1764,  -6504,  -8868,    720,      0,      0,      0,      0,  -6132,  -7332,    168,  -4752,  -1236,   -876,  -3936,      0,      0,  -4692,  -1848,  -6684,  -5592,  -5688,  -5832,  -4248,    672,   2544,   -276,   6420,  -2808,    684,   6876,   3108,  -2532,    444,  -2124,   4344,   2220,   5088,   1848,   6612,   1944,   5100,  10452,   4080,      0,      0,      0,   1092,   1884,   2532,   6300,  -1068,   2400,   1644,   2916,   9984,  -1620,   7188,   4176,   6636,   9456,   7068,  -1776,  -1404,   2112,    840,   4008,   2508,   2124,   8244,   1992,  -2424,   2256,   -708,  -4140,   -624,   2520,  -2676,   4344,   2544,   2532,   6048,   -216,   2604,   7368,   3972,      0,   3000,   1176,   3648,   1488,   6600,   2808,   4620,   3816,   1824,   5052,   5352,   4440,   6084,   5424,   5952,   5820,   6216,   8124,   6540,   5748];
static HYOUKA2 : [i32; 6561] = [   3132,  -1404,    432,   2232,   1356,  -3024,    168,    168,  -3600,    -36,  -6720,   9444,  -3240,  -2352,  -5580,  -4752,   1056,   5136,   5688,    240,   2412,    924,  -3972,  -6888,   2316,    -96,  -1512,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   5676,   3096,   2196,   8376,   3288,  -1188,   2628,   2508,  -1800,  -3072, -11844,      0,  -5544, -11796, -21792,  -4212,  -3312,      0,   8196,   1212,   4500,   1860,  -5028,  -5808,   4908,    912,    492,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   5676,   4824,   2196,   9996,   4512,    420,   2796,   5040,  -1632,      0,   2472,      0,      0,   1536,      0,      0,  10284,      0,   8232,   2580,   4824,   4944,   -732,  -3756,   5076,   2124,    432,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   7428,   4164,   3948,  10344,   4152,   1428,   4608,   5028,    456,  -4056, -11268,      0,  -4332, -11316,      0,  -5604,  -8400,      0,  10092,   2076,   6132,   2640,  -4464,  -4296,   6744,    756,   2460,    -36,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -3072,      0,  -5592,      0,      0,      0,  -7848,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -1284,      0,  -5520,      0, -13320,      0,  -4140,  -3288,  -5424,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -4056,      0,      0,      0,      0,      0,  -7308,      0,      0,      0,      0,      0,      0,  -8496,      0,      0,      0,      0,    276,      0,  -4860,  -2556, -10500,      0,  -7152,  -5412,  -5448,   5688,   6216,   2640,  10644,   4428,   1368,   2856,   4368,  -1140,      0,      0,      0,      0,   4032,      0,      0,      0,      0,   8004,   2748,   4824,   5220,  -1176,  -4296,   4668,   3672,    372,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   8232,   5688,   3984,  10416,   5400,    624,   4860,   5364,    204,  -1284, -12192,      0,    264,  -8640,      0,      0,      0,      0,  11652,   3492,   6732,   6180,  -2244,  -2220,   7140,   3852,   2484,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   8196,   6204,   3564,  11004,   5484,    300,   5604,   4476,    348,      0,      0,      0,      0,   2148,      0,      0,      0,      0,  11652,   4104,   6876,   7584,    204,  -2088,   8436,   5412,   2760,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  10092,   6936,   6432,  12492,   5220,   2076,   7188,   7092,   2268,    276, -10080,      0,  -2724, -11508,      0,      0,  -1800,      0,  14184,   4272,   8700,   4248,  -4008,  -2604,   9912,   4056,   4788,   2232,   1500,   9612,    408,   2760,   2520,   7896,   3480,   3588,      0,      0,      0,      0,  -1752,      0,      0,      0,      0,  10644,   9252,   9792,   4248,   -180,  -2472,   9024,   4548,   5172,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   9996,  11196,   7068,  13800,   9180,   5724,   7512,   6924,   3684,      0,      0,      0,      0,  -7956,      0,      0,      0,      0,  11004,   7536,   9876,   4092,  -1392,   -204,   9060,   4752,   6588,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   8376,   9972,   7080,  13800,   8388,   6840,   6444,   7164,   2688,      0,      0,      0,      0,   6228,      0,      0,      0,      0,  10416,   6876,   9384,   6192,   3420,   -660,   9276,   5148,   4308,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  10344,  10668,   8916,  16524,   9228,   5136,   7920,   9360,   5184,      0,      0,      0,      0, -11868,      0,      0,      0,      0,  12492,   6648,  10260,   4416,  -1452,   2088,   9936,   3756,   7368,  -3240,   6768,      0,      0,   4548,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -1764,      0,      0,      0,      0,      0,
                                      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   7644,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   4596,      0,      0,      0,  19788,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -5544,      0,      0,      0,  -3348,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,    264,      0,      0,      0, -10584,      0,      0,  -5316,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -4332,      0,      0,      0,  -3984,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -2724,      0,  -5664,      0,  -9576,      0,  -6984,  -2244,   4152,    924,   3120,    828,   4248,    828,   -648,    612,   1584,  -1872,      0,      0,      0,      0,  -1836,      0,      0,      0,      0,   5220,   1212,   3660,     24,  -4344,  -6420,   3156,   -264,   -840,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   4944,   5472,   2148,   6192,   1572,  -1452,   2748,   2832,   -528,      0,      0,      0,      0, -13776,      0,      0,      0,      0,   7584,   1380,   5544,   1560,  -4956,  -5832,   5496,    468,   1620,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   1860,   3228,   1788,   4092,    252,  -3372,   1740,   1464,   -120,      0,      0,      0,      0,  -2748,      0,      0,      0,      0,   6180,   1500,   3540,   1560,  -4620,  -6660,   2700,    276,    360,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   2640,   4044,   2616,   4416,   1656,   -972,   1332,    984,  -1140,  -2556, -14640,      0,      0, -11868,      0,      0,      0,      0,   4248,   1668,   4644,   -432,  -5532,  -3840,    180,   1884,   3804,    168,   2472,  -3108,   7896,    372,  -2940,  -2700,   -672,  -7056,      0,   6780,   8016,      0,   2952,   9192,      0,   5628,   4404,   2856,  -2520,   -912,    612,  -4488,  -9072,     48,  -2028,  -4512,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   2796,    216,  -1128,   6444,    864,  -4884,   -480,    576,  -5256,  -7848, -14352,      0,      0, -11568,      0,      0,      0,      0,   5604,  -2424,   1008,   1740,  -5136,  -8760,   1956,  -1056,  -3024,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   2628,   1092,  -1248,   7512,    864,  -2712,   -480,   2112,  -4956,      0,   3456,      0,      0,   4140,      0,      0,   3024,      0,   4860,  -1620,    984,   2748,  -3576,  -8736,   2316,   -972,  -3384,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   4608,   1548,    372,   7920,   1356,  -3480,   1608,   1716,  -2988,  -7308,  -9444,      0,      0, -14232,      0,      0,      0,      0,   7188,  -1032,   2808,   1332,  -5172,  -8544,   3588,  -1800,   -840,  -4752,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -4212,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0, -15648,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -5604,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -4332,      0, -16356,      0,      0,  -9792,      0,   2316,   2784,  -1044,   9024,   1668,  -1740,     48,   1044,  -4320,      0,      0,      0,      0,   1524,      0,      0,      0,      0,   4668,  -1044,   1212,   3156,  -3228,  -8208,   2796,    468,  -2172,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   5076,   2292,
                                   1056,   9276,   1740,  -2052,   2316,    828,  -2556,  -4140,  -9252,      0,      0, -10092,      0,      0,      0,      0,   8436,    804,   2940,   2700,  -4428,  -5748,   5580,    408,   -624,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   4908,   3504,   1032,   9060,   1644,   -732,   1956,   2148,  -1248,      0,   9888,      0,      0,  -1080,      0,      0,      0,      0,   7140,    696,   3072,   5496,  -2520,  -6504,   5580,   1356,   -576,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   6744,   4224,   2676,   9936,    636,   -108,   3588,   1812,  -1152,  -7152, -16068,      0,  -6984, -16956,      0,      0,  -6996,      0,   9912,   1620,   4764,    180,  -7056,  -6552,   6408,   -132,   1548,  -1404,     24,   3960,   1500,   3960,   -504,   2472,    744,  -1656,      0,   7464,  10824,   6768,  11892,   3012,      0,  11268,   6456,   6216,   6660,   3576,   3120,    840,  -3168,   2784,    336,    -72,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   4824,   6624,   1428,   9972,   7596,    456,   1092,   2472,  -2088,      0, -11652,      0,      0,  -2376,      0,      0,   3144,      0,   6204,   4608,   3336,   3228,   -240,  -3228,   3504,    972,    228,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   3096,   6624,    372,  11196,   9252,    624,    216,   3384,  -4044,      0,   9408,   6960,      0,  14604,   6312,      0,  11976,   3876,   5688,   5520,   2796,   5472,   1428,  -3876,   2292,   1188,  -1044,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   4164,   5352,   1908,  10668,   7956,    960,   1548,   3552,  -1560,      0,  -7488,      0,      0,    996,      0,      0,      0,      0,   6936,   3636,   4440,   4044,    276,  -1452,   4224,   2112,   1140,  -6720,   7464,  11004,      0,  11328,      0,   6780,      0,   7644,      0,      0,      0,      0,  14112,      0,      0,      0,      0,      0,      0,  11448,      0,   6204,      0,      0,      0,   7644,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   2472,   9408,   5940,      0,  19872,      0,   3456,      0,   5736,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  14316,  10776,      0,   8424,      0,   9888,  -1200,   5784,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0, -11844, -11652,  -3360,      0,  -5616,      0, -14352, -10524,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0, -12192,      0,  -4068,      0, -15420,      0,  -9252, -10824,  -7860,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0, -11268,  -7488,  -5904,      0,  -3924,      0,  -9444,  -6000,      0,      0,      0,      0,      0, -10464,      0,      0,      0,      0, -10080,      0,  -7368, -14640, -12804,      0, -16068, -10404,   2508,    240,   6660,  -1896,   9252,   7812,    -36,  -2520,    876,  -6624,      0,      0,      0,      0,  17160,      0,      0,  10800,      0,   2748,   2016,  -1116,   1212,   -600,  -7920,  -1044,  -1056,  -3972,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   2580,   5520,   -924,   6876,   6168,  -2928,  -1620,   1248,  -4728,      0,      0,      0,      0,   1464,      0,      0,      0,      0,   4104,   -216,    648,   1500,   -252,  -5868,    696,    276,  -1884,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   1212,   4608,  -1668,   7536,   7800,  -1620,  -2424,   1980,  -4008,      0,  14316,      0,      0,  16764,      0,      0,  11592,      0,   3492,   -216,   -372,   1380,   1200,  -7488,    804,   -576,  -3552,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   2076,   3636,   -228,   6648,   6084,  -1188,  -1032,   1884,  -2916,      0,      0,      0,      0,   3852,      0,      0,      0,      0,   4272,   2208,   2820,   1668,   3588,   -720,   1620,   3612,   1008,   1356,   3960,   9228,   2760,   5220,   5268,    372,  -1248,   4560,      0,  11328,  15732,   4548,   5292,   6996,      0,  10560,   8208,   4428,   7812,   5892,    828,   1272,    924,   1668,    252,   4944,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   4512,   9252,   5160,   8388,   6156,   4992,    864,    588,   2568,      0,  -5616,      0,  -3348,  -7284,  -7104,      0,  -6816,      0,   5484,   7800,   6180,    252,   -588,    372,   1644,    744,   5316,      0,      0,      0,
                                      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   3288,   7596,   3588,   9180,   6156,   4812,    864,   -972,    216,      0,  19872,  16920,   7644,   9120,   7800,      0,  15156,  11952,   5400,   6168,   4512,   1572,   -252,  -2784,   1740,  -1068,   1296,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   4152,   7956,   4176,   9228,   5172,   4428,   1356,    624,   1908,      0,  -3924,      0,  -3984,  -7044,      0,      0,  -7776,      0,   5220,   6084,   5664,   1656,  -2040,   -768,    636,   -480,   4740,  -2352,  11892,  18576,  -1752,   5292,  11292,   2952,  -2352,  11256,      0,  14112,  19008,      0,   6960,      0,      0,  12552,   6804,   4032,  17160,  15216,  -1836,   6216,  10152,   1524,  -2112,  10884,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   1536,  14604,  11304,   6228,   9120,  12432,   4140,  -1176,   9144,      0,      0,      0,      0,   -432,      0,      0,      0,      0,   2148,  16764,  12912,  -2748,   6288,   4560,  -1080,    624,  11676,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0, -11796,  -2376,    948,  -7956,  -7284,    288, -11568, -16296,  -2736,      0,      0,      0,      0,   -432,      0,      0,      0,      0,  -8640,   1464,  -2832, -13776,  -9312,  -7356, -10092, -13392,    228,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0, -11316,    996,  -3012, -11868,  -7044,   1044, -14232, -16392,  -3528,  -8496, -10464,      0,      0,  -5664,      0,      0,      0,      0, -11508,   3852,  -2160, -11868,  -5976,    336, -16956, -10560,   4212,  -3972,    840,  -1164,   -180,   1272,  -2316,  -4488,  -6252,  -5400,      0,   6204,      0,  -1764,   6216,   5076,      0,   2172,      0,  -1176,   -600,   -396,  -4344,  -5772,  -8592,  -3228,  -7200,  -3840,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   -732,   1428,  -1080,   3420,   -252,  -1980,  -3576,  -5640,  -5076, -13320, -15420,      0, -10584,  -9312, -10380, -15648, -15960,      0,    204,   1200,    228,  -4620,  -6552,  -8868,  -2520,  -6336,  -2784,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -5028,   -240,  -1200,  -1392,   -588,  -1212,  -5136,  -7716,  -5256,      0,   8424,      0,   4596,   6288,      0,      0,   4968,      0,  -2244,   -252,    -60,  -4956,  -6552,  -7392,  -4428,  -8412,  -3852,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -4464,    276,  -1044,  -1452,  -2040,  -1764,  -5172,  -6156,  -3720, -10500, -12804,      0,  -9576,  -5976,  -6420, -16356,  -5508,      0,  -4008,   3588,    360,  -5532,  -5748,  -2172,  -7056,  -2436,    240,    168,    744,     84,   3480,  -1248,  -2268,   -672,  -3216,  -2388,      0,      0,      0,      0,  -2352,      0,      0,      0,      0,   4368,    876,   2700,   1584,  -6252,  -4524,   1044,  -3384,   -612,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   5040,   3384,    456,   7164,   -972,  -1908,   2112,    516,  -2424,      0, -10524,      0,      0, -16296,      0,      0,      0,      0,   4476,   1980,   3972,   1464,  -7716,  -6564,   2148,  -4392,    180,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   2508,   2472,    780,   6924,    588,   -984,    576,    516,  -2136,      0,      0,      0,      0,  -1176,      0,      0,      0,      0,   5364,   1248,   2820,   2832,  -5640,  -5124,    828,  -5568,  -1680,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   5028,   3552,   2112,   9360,    624,  -1440,   1716,    -84,  -1272,      0,  -6000,      0,      0, -16392,      0,      0,      0,      0,   7092,   1884,   3528,    984,  -6156,  -6900,   1812,  -4512,   2496,   1056,  11268,  15384,      0,  10560,      0,   5628,      0,   7116,      0,      0,      0,      0,  12552,      0,      0,      0,      0,      0,  10800,  11112,      0,   2172,      0,      0,      0,   9492,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  10284,  11976,  10572,      0,  15156,      0,   3024,      0,  10596,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  11592,  14040,      0,   4968,      0,      0,   6468,  10188,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
                                      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -3312,   3144,      0,      0,  -6816,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0, -15960,      0,      0,  -5016,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -8400,      0,      0,      0,  -7776,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -1800,      0,  -1656,      0,  -5508,      0,  -6996,   -900,  10848,    -96,    336,  -2268,   4548,    252,  -4068,  -2028,  -3384,  -4836,      0,      0,      0,      0,  -2112,      0,      0,      0,      0,   3672,  -1056,    936,   -264,  -7200,  -7848,    468,  -3480,  -2616,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   2124,   1188,   -504,   5148,  -1068,  -3780,   -972,  -5568,  -4176,  -3288, -10824,      0,  -5316, -13392,      0,      0,  -5016,      0,   5412,   -576,   1896,    276,  -8412,  -8940,   1356,  -4356,   -504,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,    912,    972,  -1416,   4752,    744,  -3144,  -1056,  -4392,  -3828,      0,  -1200,      0,      0,    624,      0,      0,   6468,      0,   3852,    276,    864,    468,  -6336,  -7080,    408,  -4356,  -2400,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,    756,   2112,   -888,   3756,   -480,  -2292,  -1800,  -4512,  -3564,  -5412, -10404,      0,  -2244, -10560,      0,  -9792,   -900,      0,   4056,   3612,    204,   1884,  -2436,    744,   -132,   2964,   5364,    432,   3960,  -3984,   9612,   9228,    612,  -3108,     84,  -8016,      0,  11004,   6300,      0,  18576,   8016,      0,  15384,   8532,   2640,  -1896,  -1632,    828,  -1164,  -8292,  -1044,  -2268,  -5220,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   2196,    372,  -3540,   7080,   3588,  -4200,  -1248,    780,  -5544,  -5592,  -3360,      0,      0,    948,      0,      0,      0,      0,   3564,  -1668,     72,   1788,  -1200,  -8004,   1032,  -1416,  -3600,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   2196,   1428,  -3540,   7068,   5160,  -1836,  -1128,    456,  -6624,      0,   5940,  10560,      0,  11304,      0,      0,  10572,      0,   3984,   -924,   -312,   2148,  -1080,  -7392,   1056,   -504,  -3228,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   3948,   1908,   -660,   8916,   4176,  -2616,    372,   2112,  -3372,      0,  -5904,      0,      0,  -3012,      0,      0,      0,      0,   6432,   -228,   2004,   2616,  -1044,  -6900,   2676,   -888,   -780,   9444,  10824,   6300,      0,  15732,      0,   8016,      0,      0,      0,      0,      0,      0,  19008,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   6612,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   6960,  10560,      0,  16920,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   8496,      0,      0,      0,      0,      0,   6120,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   5688,   2412,   3576,  -1632,   9792,   5892,   -576,   -912,   2700,  -5640,      0,  11448,      0,      0,  15216,      0,      0,  11112,   5976,   4824,  -1116,     24,   3660,   -396,  -7248,   1212,    936,  -3132,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   4824,   2796,   -312,   9384,   4512,  -2472,    984,   2820,  -3660,  -5520,  -4068,      0,      0,  -2832,      0,      0,      0,      0,   6876,   -372,   2256,   3540,    -60,  -6528,   3072,    864,  -1152,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
                                      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   4500,   3336,     72,   9876,   6180,   -660,   1008,   3972,  -3636,      0,  10776,   8496,      0,  12912,   7056,      0,  14040,   7416,   6732,    648,   2256,   5544,    228,  -5592,   2940,   1896,  -1344,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   6132,   4440,   2004,  10260,   5664,     36,   2808,   3528,  -1404,  -4860,  -7368,      0,  -5664,  -2160,      0,  -4332,  -1656,      0,   8700,   2820,   4836,   4644,    360,  -5280,   4764,    204,    960,  -3024,   -504,    612,   2520,   5268,   -696,  -2940,  -2268,  -5076,      0,      0,      0,      0,  11292,      0,      0,      0,      0,   1368,    -36,   -576,   -648,  -2316,  -4368,  -1740,  -4068,  -3240,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,    420,    624,  -1836,   6840,   4812,  -3048,  -2712,   -984,  -5928,      0,      0,      0,      0,    288,      0,      0,      0,      0,    300,  -1620,   -660,  -3372,  -1212,  -7032,   -732,  -3144,  -2628,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -1188,    456,  -4200,   5724,   4992,  -3048,  -4884,  -1908,  -8064,      0,      0,      0,      0,  12432,      0,      0,      0,      0,    624,  -2928,  -2472,  -1452,  -1980,  -7308,  -2052,  -3780,  -5352,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   1428,    960,  -2616,   5136,   4428,   -276,  -3480,  -1440,  -5208,      0,      0,      0,      0,   1044,      0,      0,      0,      0,   2076,  -1188,     36,   -972,  -1764,  -4476,   -108,  -2292,  -1644,  -5580,   3012,   8016,      0,   6996,      0,   9192,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   5076,      0,      0,      0,   2604,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   6312,      0,      0,   7800,      0,      0,      0,   -216,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   7056,      0,      0,      0,      0,      0,   3972,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0, -21792,      0,      0,      0,  -7104,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0, -10380,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -6420,      0,      0,      0,   2868,  -6888,  -3168,  -8292,  -2472,    924,  -4368,  -9072,  -4524, -12120,      0,      0,      0,      0,  10152,      0,      0,      0,      0,  -4296,  -7920,  -7248,  -6420,  -8592, -15348,  -8208,  -7848, -10464,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -3756,  -3876,  -7392,   -660,  -2784,  -7308,  -8736,  -5124,  -9924,      0,      0,      0,      0,  -7356,      0,      0,      0,      0,  -2088,  -7488,  -5592,  -6660,  -7392, -12996,  -6504,  -7080,  -7452,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -5808,  -3228,  -8004,   -204,    372,  -7032,  -8760,  -6564, -10296,      0,      0,      0,      0,   4560,      0,      0,      0,      0,  -2220,  -5868,  -6528,  -5832,  -8868, -12996,  -5748,  -8940,  -8952,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -4296,  -1452,  -6900,   2088,   -768,  -4476,  -8544,  -6900,  -7704,      0,      0,      0,      0,    336,      0,      0,      0,      0,  -2604,   -720,  -5280,  -3840,  -2172,  -2400,  -6552,    744,  -2472,  -3600,  -1656,  -8016,   3588,   4560,  -5076,  -7056,  -2388, -12624,      0,   7644,      0,      0,  11256,      0,      0,   7116,  -1104,  -1140,  -6624,  -5640,  -1872,  -5400, -12120,  -4320,  -4836,  -8796,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -1632,  -4044,  -6624,   2688,    216,  -8064,  -4956,  -2136,  -9828,      0,      0,      0,      0,  -2736,      0,      0,      0,      0,    348,  -4008,  -3636,   -120,  -5256, -10296,  -1248,  -3828,  -5904,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -1800,  -2088,  -5544,   3684,   2568,  -5928,
                                  -5256,  -2424,  -9828,      0,   5736,      0,      0,   9144,   -216,      0,  10596,    120,    204,  -4728,  -3660,   -528,  -5076,  -9924,  -2556,  -4176,  -7068,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,    456,  -1560,  -3372,   5184,   1908,  -5208,  -2988,  -1272,  -6768,      0,      0,      0,      0,  -3528,      0,      0,      0,      0,   2268,  -2916,  -1404,  -1140,  -3720,  -7704,  -1152,  -3564,  -4356,   5136,   6456,   8532,      0,   8208,      0,   4404,      0,  -1104,      0,      0,      0,      0,   6804,      0,      0,      0,      0,      0,      0,   5976,      0,      0,      0,      0,      0,   1512,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   3876,      0,      0,  11952,      0,      0,      0,    120,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   7416,      0,      0,      0,      0,      0,    516,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -1224,  -1512,    -72,  -5220,   5172,   4944,  -3240,  -4512,   -612,  -8796,      0,   7644,   6612,      0,  10884,   2604,      0,   9492,   1512,    372,  -3972,  -3132,   -840,  -3840, -10464,  -2172,  -2616,  -6300,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,    432,  -1044,  -3228,   4308,   1296,  -5352,  -3384,  -1680,  -7068,  -5424,  -7860,      0,      0,    228,      0,      0,      0,      0,   2760,  -3552,  -1344,    360,  -3852,  -8952,   -576,  -2400,  -4500,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,    492,    228,  -3600,   6588,   5316,  -2628,  -3024,    180,  -5904,      0,   5784,   6120,  19788,  11676,   3972,      0,  10188,    516,   2484,  -1884,  -1152,   1620,  -2784,  -7452,   -624,   -504,  -4500,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   2460,   1140,   -780,   7368,   4740,  -1644,   -840,   2496,  -4356,  -5448,   2508,   5688,   4152,   4212,   2868,      0,  10848,  -1224,   4788,   1008,    960,   3804,    240,  -2472,   1548,   5364,  -2124];
static HYOUKA3 : [i32; 6561] = [ -12744,   5136,   -468,   6936,   2448,  11448,  -5496,    432,    948,  -5352,  12444,   1992,   -456,   9000,   5364,  -4584,   6864,   4944, -10452,   2628,  -3996,   2700,   3132,   8532, -10788,   3852,  -2424,   6936,   2448,  11448,   8100,   6840,   4560,  12468,   2052,  10140,   9912,   7740,   8772,  11604,   5808,      0,  10344,   5580,      0,   7164,  -1656,  10344,   8424,   8208,      0,   5628,   2124,   9048,  -5496,    432,    948,  12468,   2052,  10140,      0,   2040,   3516,   1572,  -3828,   2472,   7560,   5724,      0,      0,    276,      0,  -6408,   1920,  -3288,   5160,   1428,      0,      0,   1752,    912,   2592,   6504,      0,  -1320,   4728,      0,   2148,  -1560,      0,  -4428,  12492,      0,   1068,   6888,      0,  -3216,   -708,      0,    384,   4992,      0,  -2856,   7368,      0,   -948,   2076,  12408,  -1320,   4728,      0,      0,   3408,      0,      0,  -1092,      0,      0,  11040,      0,      0,   4884,      0,      0,  -3360,      0,      0,   7956,      0,      0,   5928,      0,      0,    288,   8832,   2148,  -1560,      0,      0,  -1092,      0,      0,  -3684,      0,      0,    960,      0,      0,  -1392,      0,      0,  -8112,      0,      0,   6576,      0,      0,   -732,      0,      0,  -3888,  13068,  -3228, -14580,   4080,   -828,  -6840,   4188,    372, -11424,   5508,  -3924,  -1104,   2964,  -1860,  -3588,   4512,  -1896,  -8772,   7308,  -4008,      0,    528,  -2316,  -2496,   2988,  -4416, -10332,   3060,   -828,  -6840,   4188,      0,   2280,   6852,  -2988,   -744,   1200,      0,   7212,   1272,      0,   4176,   9240,  -1908,    -24,   9876,      0,      0,   4296,      0,   3636,   4728,   -924,  -3576,   2940,    372, -11424,   5508,  -2988,   -744,   1200,   7524,      0,   5736,   3576,  -4596,   4968,   1752,  -4140,   5532,    744, -10572,   7212,      0,      0,   1248,  -2664,   -324,   2088,    348, -11112,   4944,  -5856,   -360,  -4944,    528,   2844,  -4260,   6456,      0,      0, -11556,  -1140,  -4956,  -3948,   4308,      0, -10548,      0,      0,  -7956,  -5376,  -5940,  -2076,   4248,      0,  -5544,   4944,  -7620,  10740,   5904,   2628,  10980,   3984,   8484,      0,      0,      0,      0,   4044,   6984,  10536,   1476,      0,      0,      0,      0,      0,   3264,   3888,  11580,   5712,      0,      0,   2880,   5208,      0,      0,  11088,      0,     24,   7596,      0,      0,      0,      0,      0,      0,      0,  -3984,      0,      0,      0,      0,      0,      0,   6780,      0,   1272,      0,      0,      0,  12804,  -8676,   5388,      0,   -684,   4548,      0,      0,      0,      0,      0,      0,      0,  -1596,   4140,      0,      0,      0,      0,      0,      0,      0,  -1884,   2460,      0,  -7968,   1380,   6036,   6444,   4800,      0,      0,   4368,      0,      0,      0,      0,      0,      0,      0,      0,   3684,      0,      0,      0,      0,      0,      0,      0,      0,   4116,      0,      0,   3012,  14940,      0,  -3780,      0,      0,  -3696,      0,      0,      0,      0,      0,      0,      0,      0,  -4704,      0,      0,      0,      0,      0,      0,      0,      0,  -2532,      0,      0,  -9636,  12324,  -5016,  -6504,  -3456,      0,  -3768,  -3120,    936,      0,      0,      0,      0,  -5352, -12504,  -7644,  -5484,  -5748, -11004,      0,      0,      0,      0,  -5568,  -5700,  -5880,    744,  -4752,  -6660,      0,      0,   3492,      0,   -720,   3936,      0,      0,      0,      0,      0,      0,      0,    156,   2376,      0,      0,      0,      0,      0,      0,      0,   -120,   4656,      0,  -2940,   6216,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -4188,   7764,      0,      0,      0,      0,      0,      0,      0,  -5328,  -2304,      0,      0,      0,  -7128,   8484,   1824,  -3252,   -504,   4140,  -1500,    252,   4380, -13644,   3624,  -1080,  -7872,   1920,   1476, -10812,    -36,   -792,  -7212,   5484,  -4224,  -5832,    624,   2160,  -7164,   8148,    612,   7680,   4356,  12132,   -888,   2580,   1632,   9552,  -2640,   9888,   -540,   4284,      0,   3624,   -396,      0,   4548,  -2160,      0,   8832,   2016,   9180,  -1716,   2568,      0,   5784,   5640,   9444,  -5064,   4368,   3324,      0,  -1956,      0,   3972,   1224,   3864,  -9252, -15912,      0,      0,  -9072,      0,      0,      0,      0,  -4704,   3672,  -4956,      0,  -2844,      0,  -3576,   2220,   2820,   -384,   3312,      0,  -8664,  -2016,      0,  -4896,  -5184,      0,      0,   6852,      0,  -9156,   -624,      0,  -5640,  -5244,      0,  -2604,   3852,      0,  -8844,   -420,      0,  -4104,   -468,   8256,  -1608,   3180,      0,      0,  -2484,      0,      0,  -2628,      0,      0,   7272,      0,      0,  -1464,      0,      0,  -5772,      0,      0,   7788,      0,      0,   -756,      0,      0,   -588,   8100,      0,  -5880,      0,      0,  -9192,      0,      0,  -8940,      0,      0,      0,      0,      0,  -9576,      0,      0, -12648,      0,      0,   1500,      0,      0,  -7740,      0,      0,  -6300,   7728,  -1476,  -7536,   7584, -11700,  -8364,  -2700,   1548,  -7980,   6888, -10380, -11316,  -1872,  -5508,  -9792,  -1488,  -8220, -12900,  -3888,  -1212,   -108,   2100,  -9864,  -6972,  -8256,  -2328,  -8148,   5868,   4116,  -2568,  12036,      0,  -4128,   3300,      0,  -2496,   4296,      0,  -5100,      0,      0,  -4656,   1980,  -3900,  -2328,   2904,      0,  -1200,      0,      0,  -4440,    480,   -204,  -3396,  10860,   3408, -10164,   9552, -12228,  -3456,  -6108,   7368,  -5904,   7980,  -3684, -13644,      0,  -4212, -10404,  -2592,  -4188, -12096,   2172,   6384,   4992,   6480, -10116,  -3768,  -7788,   2904,  -8760,   8544,  -5352,  12444,   1992,   9912,   7740,   8772,   1572,  -3828,   2472,      0,  21288,   6864,   7752,  14148,   8832,  -4668,  11340,  11280,   3888,   6192,   1296,   6072,   6960,    264,  -1176,   8172,   2880,   -456,   9000,   5364,  11604,   5808,      0,   7560,   5724,      0,   7752,  14148,   8832,   6636,  11028,      0,   5184,  12972,      0,   3036,   7020,   2832,   8148,   4584,      0,   -468,   6696,   6084,  -4584,   6864,   4944,  10344,   5580,      0,      0,    276,      0,  -4668,  11340,  11280,   5184,  12972,      0,      0,      0,      0,      0,   6840,   3360,  -2328,   4920,      0,      0,   3672,   7536,  -4428,  12492,      0,      0,  11040,      0,      0,    960,      0,      0,  18492,      0,      0,  12864,      0,      0,   5436,      0,      0,  11256,      0,      0,  12468,      0,      0,   8052,   5352,   1068,   6888,      0,      0,   4884,      0,      0,  -1392,      0,      0,  12864,      0,      0,   5100,      0,      0,  -3624,      0,      0,  11160,      0,      0,   6996,      0,      0,    240,  13380,  -3216,   -708,      0,      0,  -3360,      0,      0,  -8112,      0,      0,   5436,      0,      0,  -3624,      0,      0,  -6816,      0,      0,   4980,      0,      0,    588,      0,      0,  -7428,   8688,  -3924,  -1104,   2964,      0,   7212,   1272,   3576,  -4596,   4968,      0,      0,      0,      0,   8496,   4536,      0,      0,  12192,      0,      0,      0,      0,   3240,   -612,      0,  -7704,   6048,  -1860,  -3588,   4512,      0,   4176,   9240,   1752,  -4140,   5532,      0,   8496,   4536,      0,   2736,   8628,      0,  -4716,  16896,      0,      0,    348,      0,   1980,   6312,  -1596,  -5292,   5808,  -1896,  -8772,   7308,  -1908,    -24,   9876,    744, -10572,   7212,      0,      0,  12192,      0,  -4716,  16896,      0,      0,      0,      0,      0,  10140,      0,  -1548,   8376,    828, -11604,   8124,      0,  11604,      0,   5796,   9132,      0,      0,      0,      0,      0,      0,      0,   4140,  11088,      0,      0,      0,      0,      0,      0,  -3996,   1476,   2112,      0,      0,      0,      0,   4452,
                                  10008,   2904,  11388,   4392,      0,      0,      0,      0,      0,   5496,   7008,  10068,   9744,      0,      0,      0,      0,      0,      0,   2652,   6240,   3672,      0,      0,   5316,   7020,      0,      0,   2400,      0,   3804,      0,      0,      0,      0,      0,      0,   9348,      0,   8556,      0,      0,      0,      0,      0,      0,      0,      0,   1452,      0,      0,      0,  12516,  -8628,  12984,      0,      0,  10512,      0,      0,      0,      0,      0,      0,      0,      0,  10632,      0,      0,      0,      0,      0,      0,      0,      0,   7464,      0,      0,   9624,   9360,   -132,   5964,      0,      0,   2952,      0,      0,      0,      0,      0,      0,      0,      0,   4392,      0,      0,      0,      0,      0,      0,      0,      0,   3072,      0,      0,   1320,  14364,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   1848,    336,   -504,      0,      0,      0,      0,      0,      0,  -1236,   2328,      0,      0,      0,      0,      0,      0,      0,   1764,  -8736,      0,      0,      0,      0,      0,      0,      0,   2004,   3732,      0,      0,      0,      0,      0,      0,      0,    216,   6492,      0,      0,      0,      0,      0,      0,      0,      0,   2244,      0,  -1956,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   -396,  17820,   5316,   1212,   5808,      0,   1416,      0,      0, -10836,  19020,      0,   -792,   8988,      0,      0,      0,      0,     96,   7176,   3912,  -1224,    360,      0,   1764,  11712,   6696,   3012,  10068,   6204,   3564,   1920,      0,   6132,      0,      0,  -3024,   7248,   8544,   -516,   4200,      0,  -1344,   3336,      0,   5148,   7572,   4716,    888,   2112,      0,    972,   8652,   6564,   -120,  10488,   3084,  -4356,     12,      0,      0,      0,      0,      0,  12540,      0,   2196,  -3300,      0,      0,      0,      0,      0,   9408,   8208,  -3300,   1896,      0,   4764,  10056,  10272,  -7212,   9828,      0,      0,   3816,      0,      0,  -6972,      0,      0,  12720,      0,      0,   5856,      0,      0,   -816,      0,      0,  10296,      0,      0,   4752,      0,      0,   4008,   3144,  -1464,   4464,      0,      0,  -1044,      0,      0,  -4704,      0,      0,      0,      0,      0,   -540,      0,      0,  -7140,      0,      0,  10284,      0,      0,    276,      0,      0,   -588,  10944,  -6456, -18684,      0,      0,      0,      0,      0, -11280,      0,      0,      0,      0,      0,      0,      0,      0, -15096,      0,      0,      0,      0,      0,  -8964,      0,      0,  -8784,      0,   -432,  -3684,      0,      0,    336,  -2712,   2784,  -7284,      0,      0,      0,      0,      0,  -6012,    912,      0,      0,      0,      0,      0,      0,      0,   -672,  -5820,    408,  -2244,  10764,  -2484,  -1020,   6564,      0,  -1644,  -1008,   4416,  -2616,   8580,      0,   -708,      0,      0,  -5856,   2712,      0,  -9780,   3060,      0,      0,      0,      0,  -2412,  -2868,    684,  -3156,  10656,   3672,  -3096,   9672,      0,  -8268,      0,      0,  -5328,  14088,      0,      0,      0,      0,  -9228,      0,      0, -22620,      0,      0,      0,  11376,      0,  -5964,   -852,   2976,  -7044,  13620, -10452,   2628,  -3996,   7164,  -1656,  10344,  -6408,   1920,  -3288,   3888,   6192,   1296,   3036,   7020,   2832,      0,   6840,   3360,  -6708,    504,  -8040,   3648,  -1560,   9108, -11160,   2664,  -5424,   2700,   3132,   8532,   8424,   8208,      0,   5160,   1428,      0,   6072,   6960,    264,   8148,   4584,      0,  -2328,   4920,      0,   3648,  -1560,   9108,   2172,   7932,      0,    -12,   1980,   7368, -10788,   3852,  -2424,   5628,   2124,   9048,      0,   1752,    912,  -1176,   8172,   2880,   -468,   6696,   6084,      0,   3672,   7536, -11160,   2664,  -5424,    -12,   1980,   7368, -13632,   2796,  -2892,    384,   4992,      0,      0,   7956,      0,      0,   6576,      0,      0,  11256,      0,      0,  11160,      0,      0,   4980,      0,      0,   3648,      0,      0,   8616,      0,      0,   8664,   7992,  -2856,   7368,      0,      0,   5928,      0,      0,   -732,      0,      0,  12468,      0,      0,   6996,      0,      0,    588,      0,      0,   8616,      0,      0,   6912,      0,      0,   3408,   9000,   -948,   2076,  12408,      0,    288,   8832,      0,  -3888,  13068,      0,   8052,   5352,      0,    240,  13380,      0,  -7428,   8688,      0,   8664,   7992,      0,   3408,   9000,      0,  -2340,  12384,  -4008,      0,    528,      0,      0,   4296,      0,      0,   1248,      0,      0,      0,      0,      0,    348,      0,      0,  10140,      0,      0,      0,      0,   2100,      0,  -5052,      0,    264,  -2316,  -2496,   2988,      0,   3636,   4728,  -2664,   -324,   2088,      0,   3240,   -612,      0,   1980,   6312,      0,  -1548,   8376,      0,   2100,      0,  -1356,   5544,   2388,  -6948,  -2496,  -1224,  -4416, -10332,   3060,   -924,  -3576,   2940,    348, -11112,   4944,      0,  -7704,   6048,  -1596,  -5292,   5808,    828, -11604,   8124,  -5052,      0,    264,  -6948,  -2496,  -1224,  -9708, -14700,   2256,  -1836,      0,      0,      0,   1296,      0,      0,      0,      0,      0,   4560,  -5568,   3060,   3468,      0,      0,      0,      0,      0,      0,      0,   4644,   -888,      0,      0,      0,      0,  -4320,   4392,   1068,   3852,   3240,      0,      0,      0,      0,      0,  12792,   4296,   6312,   5496,      0,      0,      0,      0,      0,  -3348,   4104,   3012,   3456,      0,      0,   5040,   4704,   1956,   6048,   5004,  10716,   6060,   3204,      0,      0,      0,      0,  10656,   3744,   2892,   7980,   8580,      0,      0,      0,      0,   5196,   3792,   4464,   4404,   3312,      0,   5568,   9072,  -6108,   4836,      0,      0,   5016,      0,      0,      0,      0,      0,      0,      0,      0,  11412,      0,      0,      0,      0,      0,      0,      0,      0,   4140,      0,      0,  10896,  -4128,   2580,   6036,      0,      0,   6432,      0,      0,      0,      0,      0,      0,      0,      0,   6480,      0,      0,      0,      0,      0,      0,      0,      0,   3492,      0,      0,   5232,  11820,  -4416,   2232,   8028,      0,   -132,  10164,      0,      0,      0,      0,      0,      0,      0,   -888,  11712,      0,      0,      0,      0,      0,      0,      0,  -1500,   7752,      0,   1404,   7596,      0,      0,      0,      0,   6144,  -4608,      0,      0,      0,      0,      0,      0,      0,   7548,  -4200,      0,   9984,      0,      0,      0,      0,  -3660,  -1248,  -7212,    300,      0,      0,      0,   7800,      0,      0,   -348,    912,      0,      0,      0,      0,      0,      0,      0,  -2304,   6636,      0,      0,      0,      0,      0,      0,      0,  -1404,      0,      0,      0,   8100,      0,      0,   7560,      0,  -3012,    936,      0,      0,      0,      0,      0,   9648,      0,  -4236,   4224,      0,      0,   7728,      0,      0,      0,      0,    480,  -3588,      0,      0,  10800,  -4728,   5784,   -696,   2112,  -4836,      0,  -1224,      0,   3204,  -6348,  -1488,      0,  -4608,   -756,  -3444,    240,    876,   3576,  -4344,   3984,  -6636,   -648,  -3336,      0,  -5580,   6804,  -1980,   6588,   3336,  15936,   -720,    780,      0,  11352,    516,      0,      0,   6816,      0,   2736,     36,      0,   2016,  -1824,      0,   6636,   1548,  10944,  -3912,   2148,      0,   2988,   6696,  12108,  -8796,   5412,
                                     36,  -2448,  -2196,   2340,   -192,  -2064,   2484,  -4992,   2268,   -744,  -7536,  -1116,    912,      0,    216,   1044,  -8436,   6996,  -4116,  -6060,    144,  -3864,  -9276,   7956,    456,  -1212,   3708,      0,      0,   3120,      0,      0,  -1632,      0,      0,  10980,      0,      0,   2232,      0,      0,   3480,      0,      0,   -576,      0,      0,    780,      0,      0,   2688,   8280,  -2856,   7668,      0,      0,   -240,      0,      0,  -1620,      0,      0,      0,      0,      0,     48,      0,      0,  -4620,      0,      0,   7848,      0,      0,    960,      0,      0,   1584,   7104,  -3036,    -96,   6648,      0,  -7728,   3468,      0,  -5976,   8520,      0,  20616,   5376,      0,  -5904,   3384,      0, -11160,   7848,      0,   5796,      0,      0,  -4740,    120,      0,  -4452,   5436,  -1416,   1440,    384,      0,  -5988,  -9456,  -1884,      0,   3540,      0,  -1056,      0,      0,      0,  -5700,      0,      0,    144,  -1356,   -960,  -3168,  -9240,  -3060, -11376,  -3012,   1920,   2340,   3588,    204,   9984,      0,  -2292,  -1812,      0,  -1212,   1608,      0,  -2652,      0,      0,  -3876,   1200,      0,  -6312,     36,      0,     24,      0,  -2700,  -4068,   1020,   1488,  -1392,  10008,  -1860,  -4920,   7656, -21348,  -5952,  -6096,    -96,  -9708,   7284,      0, -15552,   2928,  -6036, -11328,  -2496,      0, -20160,   1104,  -2568,   1860,   5016, -13908,  -5388,  -8856,  -3804,  -9288,   6864,  -5856,   -360,  -4944,  10740,   5904,   2628,      0,      0,  11088,      0,  11604,      0,   4452,  10008,   2904,      0,      0,   2400,  -1836,      0,      0,  -4320,   4392,   1068,   1956,   6048,   5004,    528,   2844,  -4260,  10980,   3984,   8484,      0,     24,   7596,   5796,   9132,      0,  11388,   4392,      0,      0,   3804,      0,      0,   1296,      0,   3852,   3240,      0,  10716,   6060,   3204,   6456,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -8676,   5388,      0,   6444,   4800,      0,      0,  -3780,      0,  -8628,  12984,      0,   -132,   5964,      0,      0,      0,      0,  -6108,   4836,      0,   2580,   6036,      0,  -4416,   2232,   8028,   -684,   4548,      0,      0,   4368,      0,      0,  -3696,      0,      0,  10512,      0,      0,   2952,      0,      0,      0,      0,      0,   5016,      0,      0,   6432,      0,      0,   -132,  10164,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -5016,  -6504,  -3456,      0,      0,   3492,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   7800,      0,      0,      0,   7560,      0,  -3768,  -3120,      0,   -720,   3936,      0,      0,      0,      0,   1848,    336,      0,   2004,   3732,      0,      0,      0,      0,   6144,  -4608,      0,   -348,    912,      0,  -3012,    936,    936,      0,      0,      0,      0,      0,      0,      0,      0,   -504,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -6444,      0,      0,  -1200,   2160,      0,      0,      0,      0,      0,      0,      0,  -1332,   8244,      0,      0,      0,      0,      0,      0,      0,  -2796,   2940,      0,      0,      0,      0,  -1200,   2160,      0,   7956,   4524,      0,      0,      0,      0,      0,      0,      0,   4272,   6204,      0,      0,      0,      0,      0,      0,      0,  -1044,   3384,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0, -10152,   4812,      0,  -4944,   3528,      0,      0,      0,      0,      0,      0,      0,  -2880,   2844,      0,      0,      0,      0,      0,      0,      0,  -8556,   2244,      0, -12252,    588,  12588,  -4944,   3528,      0,      0,    588,      0,      0,      0,      0,      0,      0,      0,      0,   -708,      0,      0,      0,      0,      0,      0,      0,      0,   -120,      0,      0,  -2460,  10512,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -4092,      0,      0,      0,      0,      0,      0,      0,      0,  -5172,      0,      0,      0,      0,      0,      0,      0,      0,  -2256,      0,      0,      0,      0,      0,  -4092,      0,      0,  -2892,  -1932,      0,      0,      0,      0,      0,      0,      0,  -4200,  -2364,      0,      0,      0,      0,      0,      0,      0,  -6612,   -432,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -7080,      0,      0,   -120,      0,      0,   7908,      0,      0,      0,      0,      0,  -7092,   5472,      0,      0,      0,      0,      0,      0,      0,  -4356,   5772,      0,   4788,   5616,   7308,   1428,  -1440,      0,  -1044,    948,      0,   5556,      0,      0,  -2112,      0,      0,   1500,  -3108,      0,   7476,  -4932,      0,   3012,   5868,      0,    816,  -1524,      0,   6312,   5940,   6420,      0,      0,      0,      0,  -4752,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -7092,    600,      0,  -9912,  -4704,      0,      0,      0,      0,      0,      0,      0, -10896,   -936,      0,      0,  -9180,      0,  -9696,      0,      0, -13680,  -2880,      0,  -8256,  -1272,   6216,  -6516,   1032,      0,      0,  -3948,      0,      0,  -7680,      0,      0,      0,      0,      0,  -3504,      0,      0,  -8028,      0,      0,   1152,      0,      0,  -4284,      0,      0,  -3492,   3108,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -5712,  -5844,      0,  -5064,  -3720,      0,      0,      0,      0,      0,      0,      0,  -5724,      0,      0,      0,      0,      0,      0,      0,      0,  -4104,    444,      0,   6276,  -2688,   8124,  -6756,  -5628,  -5304,      0,  -6996,  -2400,      0,  -2052,      0,      0,  -3480,      0,      0,  -5520,  -4332,      0,  -2592,  -2628,      0,      0,      0,      0,  -8688, -10980,      0,  -5208,   2184,   -228, -11472,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -3048,      0,      0,   6060,  -4752,  14700, -11556,  -1140,  -4956,      0,   4044,   6984,      0,      0,      0,      0,      0,      0,      0,   5496,   7008,      0,      0,   9348,      0,   4560,  -5568,      0,  12792,   4296,      0,  10656,   3744,  -3948,   4308,      0,  10536,   1476,      0,      0,  -3984,      0,   4140,  11088,      0,  10068,   9744,      0,      0,   8556,      0,   3060,   3468,      0,   6312,   5496,      0,   2892,   7980,   8580, -10548,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,
                                      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -1596,   4140,      0,      0,   3684,      0,      0,  -4704,      0,      0,  10632,      0,      0,   4392,      0,      0,      0,      0,      0,  11412,      0,      0,   6480,      0,      0,   -888,  11712,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -5352,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   9648, -12504,  -7644,  -5484,      0,    156,   2376,      0,  -4188,   7764,      0,  -1236,   2328,      0,    216,   6492,      0,      0,      0,      0,   7548,  -4200,      0,  -2304,   6636,      0,  -4236,   4224,  -5748, -11004,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   9984,      0,      0,      0,      0,      0,      0,   7728,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -1332,   8244,      0,   4272,   6204,      0,      0,      0,      0,      0,      0,      0,  10632,   9948,      0,      0,      0,      0,      0,      0,      0,   3276,   2064,      0,      0,   2304,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -2880,   2844,      0,      0,   -708,      0,      0,      0,      0,      0,      0,      0,      0,    -12,      0,      0,      0,      0,      0,      0,      0,      0,    492,      0,      0,  -2784,   5640,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -5172,      0,      0,  -4200,  -2364,      0,      0,      0,      0,      0,      0,      0, -13140, -12108,      0,      0,      0,      0,      0,      0,      0,  -9444,  -5172,      0, -10440,  -1608,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -5724,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  12096,   4812,  -2844,   4500,      0,   1284,   1440,      0,   7512,  -7152,      0,  -5376,      0,      0,  -2196,   -432,      0,  -3144,  -3300,      0,  -2472,   2592,      0,  -1944,   -504,      0,   4764,   7032,  12228,  -7920,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -2652,      0,      0,   4872,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -9840,    480,      0,      0,  -7092,      0,      0, -10740,      0,      0,      0,      0,      0,  -4764,      0,      0, -10956,      0,      0,   4860,      0,      0,  -4224,      0,      0,  -5052,   1908,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   9540,  -8940,  -9240,  -1992,      0,  -7452,      0,      0,  -7872,  -1452,      0, -12516,      0,      0, -13248, -10200,      0, -13500,  -3792,      0,      0,      0,      0,  -4296, -11364,      0,  -6120,   3708,  -5616, -12540,      0,      0, -17304,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -4356,      0,  -1908,   -972,  11544,  -7956,  -5376,  -5940,      0,   3264,   3888,      0,      0,   6780,      0,      0,  -3996,      0,      0,   2652,      0,      0,      0,      0,      0,      0,      0,  -3348,   4104,      0,   5196,   3792,  -2076,   4248,      0,  11580,   5712,      0,      0,   1272,      0,   1476,   2112,      0,   6240,   3672,      0,      0,   1452,      0,   4644,   -888,      0,   3012,   3456,      0,   4464,   4404,   3312,  -5544,   4944,  -7620,      0,   2880,   5208,      0,      0,  12804,      0,      0,      0,      0,   5316,   7020,      0,      0,  12516,      0,      0,      0,      0,   5040,   4704,      0,   5568,   9072,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -1884,   2460,      0,      0,   4116,      0,      0,  -2532,      0,      0,   7464,      0,      0,   3072,      0,      0,      0,      0,      0,   4140,      0,      0,   3492,      0,      0,  -1500,   7752,  -7968,   1380,   6036,      0,   3012,  14940,      0,  -9636,  12324,      0,   9624,   9360,      0,   1320,  14364,      0,      0,      0,      0,  10896,  -4128,      0,   5232,  11820,      0,   1404,   7596,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -5568,  -5700,  -5880,      0,   -120,   4656,      0,  -5328,  -2304,      0,   1764,  -8736,      0,      0,   2244,      0,      0,      0,  -3660,  -1248,  -7212,      0,  -1404,      0,      0,    480,  -3588,    744,  -4752,  -6660,      0,  -2940,   6216,      0,      0,      0,      0,      0,      0,      0,  -1956,      0,      0,      0,      0,    300,      0,      0,      0,      0,   8100,      0,      0,  10800,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -2796,   2940,      0,  -1044,   3384,      0,      0,      0,      0,      0,      0,      0,   3276,   2064,      0,      0,      0,      0,      0,      0,      0,   2676,     12,      0,      0,   6480,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   2304,      0,      0,      0,      0,      0,      0,      0,      0,   6480,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -8556,   2244,      0,      0,
                                   -120,      0,      0,      0,      0,      0,      0,      0,      0,    492,      0,      0,      0,      0,      0,      0,      0,      0,   -624,      0,      0,  -3768,   5820, -12252,    588,  12588,      0,  -2460,  10512,      0,      0,      0,      0,      0,      0,      0,  -2784,   5640,      0,      0,      0,      0,      0,      0,      0,  -3768,   5820,      0,  -6408,  11880,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -2256,      0,      0,  -6612,   -432,      0,      0,      0,      0,      0,      0,      0,  -9444,  -5172,      0,      0,      0,      0,      0,      0,      0,  -4356,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0, -10440,  -1608,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,   -372,   4416,      0,   3768,   1512,      0,   4404,      0,      0,      0,      0,      0,   2544,  -2172,      0,      0,  -7296,      0,    840,      0,      0,   -828,   -516,      0,   4080,   4860,      0,  -3600,      0,      0,   1248,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -3456,      0,      0,      0,      0,      0,      0,      0,  -4836,      0,      0,   2340,   7704,   8688,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -7560,   -324,      0,      0,  -7488,      0,      0,  -5892,      0,      0,      0,      0,      0,  -3528,      0,      0, -11016,      0,      0,   1140,      0,      0,  -5160,      0,      0,  -5328,   -600,  -8268,  -2664,      0,      0,  -7908,  -2616,      0,      0,   3036,      0,      0,      0,      0,  -6324,    -84,      0, -11604,      0,      0,      0,      0,      0,  -4716,  -7884,      0,  -5532,   7836,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -7188,  -6180,  -7092,  -9804,      0,  -5916,      0,      0,  -7332,      0,      0,  -3744,      0,      0,  -6636, -14184,      0, -10188,      0,      0,      0,      0,      0,  -7020, -10704,   6132,  -4020,  -2856,  -3996,  -5844,  -2736,  -3408,  -7692,      0,      0,      0,      0,      0,      0,      0,      0, -13140,      0,      0,      0,      0,      0,      0,      0,  -6216,  -7116,      0,   3312,  -3192,   9072,  -7128,   8484,   1824,   7680,   4356,  12132,  -5064,   4368,   3324,   -396,  17820,   5316,   3012,  10068,   6204,   -120,  10488,   3084,  -4728,   5784,   -696,   6588,   3336,  15936,  -8796,   5412,     36,  -3252,   -504,   4140,   -888,   2580,   1632,      0,  -1956,      0,   1212,   5808,      0,   3564,   1920,      0,  -4356,     12,      0,   2112,  -4836,      0,   -720,    780,      0,  -2448,  -2196,   2340,  -1500,    252,   4380,   9552,  -2640,   9888,   3972,   1224,   3864,   1416,      0,      0,   6132,      0,      0,      0,      0,      0,  -1224,      0,   3204,  11352,    516,      0,   -192,  -2064,   2484,   -384,   3312,      0,  -1608,   3180,      0,      0,  -5880,      0,  -7212,   9828,      0,  -1464,   4464,      0,  -6456, -18684,      0,  -1212,   3708,      0,  -2856,   7668,      0,  -3036,    -96,   6648,  -8664,  -2016,      0,      0,  -2484,      0,      0,  -9192,      0,      0,   3816,      0,      0,  -1044,      0,      0,      0,      0,      0,   3120,      0,      0,   -240,      0,      0,  -7728,   3468,  -4896,  -5184,      0,      0,  -2628,      0,      0,  -8940,      0,      0,  -6972,      0,      0,  -4704,      0,      0, -11280,      0,      0,  -1632,      0,      0,  -1620,      0,      0,  -5976,   8520,  -1476,  -7536,   7584,   4116,  -2568,  12036,   3408, -10164,   9552,   -432,  -3684,      0,  -2484,  -1020,   6564,   3672,  -3096,   9672,  -1416,   1440,    384,   3588,    204,   9984,  -1860,  -4920,   7656, -11700,  -8364,  -2700,      0,  -4128,   3300, -12228,  -3456,  -6108,      0,    336,  -2712,      0,  -1644,  -1008,      0,  -8268,      0,      0,  -5988,  -9456,      0,  -2292,  -1812, -21348,  -5952,  -6096,   1548,  -7980,   6888,      0,  -2496,   4296,   7368,  -5904,   7980,   2784,  -7284,      0,   4416,  -2616,   8580,      0,  -5328,  14088,  -1884,      0,   3540,      0,  -1212,   1608,    -96,  -9708,   7284,  -7080,      0,      0,   1428,  -1440,      0,      0,      0,      0,  -5724,      0,      0,  -2844,   4500,      0,  -7920,      0,      0,      0,      0,      0,   -372,   4416,      0,  -3600,      0,      0,   -120,      0,      0,  -1044,    948,      0,      0,  -4752,      0,      0,      0,      0,   1284,   1440,      0,      0,      0,      0,      0,      0,      0,   3768,   1512,      0,   1248,      0,      0,   7908,      0,      0,   5556,      0,      0,      0,      0,      0,      0,      0,      0,   7512,  -7152,      0,      0,      0,      0,      0,      0,      0,   4404,      0,      0,      0,      0,      0,  -7092,    600,      0,  -6516,   1032,      0,      0,      0,      0,      0,      0,      0,  -9840,    480,      0,      0,      0,      0,      0,      0,      0,  -7560,   -324,      0,  -8268,  -2664,      0,  -9912,  -4704,      0,      0,  -3948,      0,      0,      0,      0,      0,      0,      0,      0,  -7092,      0,      0,      0,      0,      0,      0,      0,      0,  -7488,      0,      0,  -7908,  -2616,      0,      0,      0,      0,  -7680,      0,      0,      0,      0,      0,      0,      0,      0, -10740,      0,      0,      0,      0,      0,      0,      0,      0,  -5892,      0,      0,      0,   3036,  -5712,  -5844,      0,  -6756,  -5628,  -5304,   -228, -11472,      0,      0,      0,      0,  -8940,  -9240,  -1992,  -5616, -12540,      0,      0,      0,      0,  -6180,  -7092,  -9804,  -3996,  -5844,  -2736,  -5064,  -3720,      0,      0,  -6996,  -2400,      0,      0,      0,      0,      0,      0,      0,  -7452,      0,      0, -17304,      0,      0,      0,      0,      0,  -5916,      0,  -3408,  -7692,      0,      0,      0,      0,      0,  -2052,      0,      0,      0,      0,      0,      0,      0,      0,  -7872,  -1452,      0,      0,      0,      0,      0,      0,      0,  -7332,      0,      0,      0,      0,  -2556,  14424,   7728,   5184,    480,   7164,   -528,   8772,   4548,  -8400,   8208,      0,  -4524,   3900,    504,  -5436,   3984,      0,  -3324,   7416,  -1224,   2220,   1068,   6852,  -4272,  11472,   2316,   5184,    480,   7164,  -3924,  -6504,   4296,   5376,   -276,      0,  -3180,   1188,      0,    948,  -3864,      0,    408,  -4248,      0,   2544,  -5388,   5700,  -5688,  -6000,      0,   2736,    648,   7044,   -528,   8772,   4548,   5376,   -276,      0,      0,      0,      0,      0,      0,      0,    660,      0,      0,      0,      0,      0,    888,      0,      0,   -312,      0,      0,  -2220,      0,   5148,  -9624,   1788,      0,  -9564,  -4248,      0,  -6768,  -9540,      0,  -9948,   7104,      0, -10992,  -1248,      0,  -7440,  -8712,      0, -10980,   1704,      0,  -8184,   -804,      0,  -9108,  -2580,   -108,  -9564,  -4248,      0,      0,  -7464,      0,      0, -12144,      0,      0,  -2316,      0,      0,  -7776,      0,      0, -12792,      0,      0,   1956,      0,      0,  -6876,      0,      0,  -8100,   2772,  -6768,  -9540,      0,      0, -12144,
                                      0,      0, -13320,      0,      0,      0,      0,      0, -10356,      0,      0, -13860,      0,      0,      0,      0,      0,  -8352,      0,      0,  -7452,    420,   1860,  -2628,  13020,  -7440,  -3816,    852,   5100,  -5676,  12252,  -8448,  -5424,      0,  -5712,  -8088,    180,  -5208, -10080,    156,    816,   2736,      0,  -9660,  -3552,  -7728,    660,  -4488,   9456,  -7440,  -3816,    852,      0,  -9972,  -2112, -10596,  -3492,  -1812,      0,  -6972,      0,      0,  -6552,  -6060,  -4680,  -8748,  -6120,      0,  -3792,   -480,      0, -10380,  -7812, -11388,  -5352,  -2448,   5100,  -5676,  12252, -10596,  -3492,  -1812,   8436,  -5964,  10800,   -600,  -8652,      0,  -1944, -10416,  -1080,  -4740, -11340,  -1980,   4560,      0,   8292, -10524,  -3108,  -6768,   3084,  -6612,  11880, -13644,   3624,  -1080,   -540,   4284,      0,  -9252, -15912,      0, -10836,  19020,      0,  -3024,   7248,   8544,      0,  12540,      0,  -6348,  -1488,      0,      0,   6816,      0,  -4992,   2268,   -744,  -7872,   1920,   1476,   3624,   -396,      0,      0,  -9072,      0,   -792,   8988,      0,   -516,   4200,      0,   2196,  -3300,      0,  -4608,   -756,  -3444,   2736,     36,      0,  -7536,  -1116,    912, -10812,    -36,   -792,   4548,  -2160,      0,      0,      0,      0,      0,      0,      0,  -1344,   3336,      0,      0,      0,      0,    240,    876,   3576,   2016,  -1824,      0,      0,    216,   1044,      0,   6852,      0,      0,   7272,      0,      0,      0,      0,      0,  12720,      0,      0,      0,      0,      0,      0,      0,      0,  10980,      0,      0,      0,      0,      0,  20616,   5376,  -9156,   -624,      0,      0,  -1464,      0,      0,  -9576,      0,      0,   5856,      0,      0,   -540,      0,      0,      0,      0,      0,   2232,      0,      0,     48,      0,      0,  -5904,   3384,  -5640,  -5244,      0,      0,  -5772,      0,      0, -12648,      0,      0,   -816,      0,      0,  -7140,      0,      0, -15096,      0,      0,   3480,      0,      0,  -4620,      0,      0, -11160,   7848, -10380, -11316,  -1872,      0,  -5100,      0,  -3684, -13644,      0,      0,      0,      0,      0,   -708,      0,      0,      0,      0,      0,  -1056,      0,      0,  -2652,      0,      0, -15552,   2928,  -5508,  -9792,  -1488,      0,  -4656,   1980,  -4212, -10404,  -2592,      0,  -6012,    912,      0,  -5856,   2712,      0,  -9228,      0,      0,      0,  -5700,      0,  -3876,   1200,  -6036, -11328,  -2496,  -8220, -12900,  -3888,  -3900,  -2328,   2904,  -4188, -12096,   2172,      0,      0,      0,      0,  -9780,   3060,      0, -22620,      0,      0,      0,    144,      0,  -6312,     36,      0, -20160,   1104,      0,      0,      0,  -2112,      0,      0,      0,      0,      0,      0,      0,      0,  -5376,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -7092,   5472,      0,   1500,  -3108,      0,      0,      0,      0,      0,      0,      0,  -2196,   -432,      0,      0,      0,      0,      0,      0,      0,   2544,  -2172,      0,      0,  -3456,      0,      0,      0,      0,   7476,  -4932,      0,      0,      0,      0,      0,      0,      0,  -3144,  -3300,      0,      0,      0,      0,      0,      0,      0,      0,  -7296,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0, -10896,   -936,      0,      0,  -3504,      0,      0,      0,      0,      0,      0,      0,      0,  -4764,      0,      0,      0,      0,      0,      0,      0,      0,  -3528,      0,      0,  -6324,    -84,      0,  -9180,      0,      0,  -8028,      0,      0,      0,      0,      0,      0,      0,      0, -10956,      0,      0,      0,      0,      0,      0,      0,      0, -11016,      0,      0, -11604,      0,      0,      0,      0,      0,  -3480,      0,      0,      0,      0,      0,      0,      0,      0, -12516,      0,      0,      0,      0,      0,      0,      0,      0,  -3744,      0,      0,      0,      0,  -5724,      0,      0,      0,  -5520,  -4332,      0,      0,      0,      0,      0,      0,      0, -13248, -10200,      0,      0,      0,      0,      0,      0,      0,  -6636, -14184,      0, -13140,      0,      0,      0,      0,      0,  -2592,  -2628,      0,      0,      0,      0,      0,      0,      0, -13500,  -3792,      0,      0,      0,      0,      0,      0,      0, -10188,      0,      0,      0,      0,  -8400,   8208,      0,  -3180,   1188,      0,      0,      0,      0,      0,      0,      0, -15288,   3720,      0, -12192,      0,      0,    420,   5352,      0,  -5664,  -1500,      0,  -3252,   6660,   4428,  -4524,   3900,    504,    948,  -3864,      0,    660,      0,      0, -15288,   3720,      0,  -5028,  -3876,      0,  -6864, -10932,      0,  -2016,   -156,  -1668,  -1932,  -5556,      0,  -4956,   3900,   1476,  -5436,   3984,      0,    408,  -4248,      0,      0,      0,      0, -12192,      0,      0,  -6864, -10932,      0,      0,      0,      0,   5424,      0,      0,  -1584,  -9204,      0,  -2076,    408,      0,  -9948,   7104,      0,      0,  -2316,      0,      0,      0,      0,      0,   1620,      0,      0,   2112,      0,      0,  -9744,      0,      0,  11460,      0,      0,    888,      0,      0,  -1344,    -84, -10992,  -1248,      0,      0,  -7776,      0,      0, -10356,      0,      0,   2112,      0,      0,  -6108,      0,      0, -13908,      0,      0,   2484,      0,      0,  -6000,      0,      0,  -8208,  -1200,  -7440,  -8712,      0,      0, -12792,      0,      0, -13860,      0,      0,  -9744,      0,      0, -13908,      0,      0, -19296,      0,      0,   4992,      0,      0, -12324,      0,      0, -13920,   2916,  -8448,  -5424,      0,      0,  -6972,      0,   -600,  -8652,      0,      0,      0,      0,      0, -13044,      0, -10728, -12384,      0,      0,      0,      0,      0,  -7500,      0,  -5520,  -9732,   8100,  -5712,  -8088,    180,      0,  -6552,  -6060,  -1944, -10416,  -1080,      0, -13044,      0,      0, -12744,  -4536,  -9792, -15900,  -6828,      0,  -3576,  -6096,      0,  -8112, -10920,  -6348, -10500,    168,  -5208, -10080,    156,  -4680,  -8748,  -6120,  -4740, -11340,  -1980, -10728, -12384,      0,  -9792, -15900,  -6828, -10404, -24048,      0,  -2760,   4944,   -276, -10116,  -9492,  -9996,  -5940, -14388,   6144,  -7212,   5484,  -4224,   8832,   2016,   9180,  -4704,   3672,  -4956,     96,   7176,   3912,   5148,   7572,   4716,      0,   9408,   8208,  -4344,   3984,  -6636,   6636,   1548,  10944,  -8436,   6996,  -4116,  -5832,    624,   2160,  -1716,   2568,      0,      0,  -2844,      0,  -1224,    360,      0,    888,   2112,      0,  -3300,   1896,      0,   -648,  -3336,      0,  -3912,   2148,      0,  -6060,    144,  -3864,  -7164,   8148,    612,   5784,   5640,   9444,  -3576,   2220,   2820,   1764,  11712,   6696,    972,   8652,   6564,   4764,  10056,  10272,  -5580,   6804,  -1980,   2988,   6696,  12108,  -9276,   7956,    456,  -2604,   3852,      0,      0,   7788,      0,      0,   1500,      0,      0,  10296,      0,      0,  10284,      0,      0,      0,      0,      0,   -576,      0,      0,   7848,      0,      0,   5796,      0,  -8844,   -420,      0,      0,   -756,      0,      0,  -7740,      0,      0,   4752,      0,      0,    276,      0,      0,  -8964,      0,      0,    780,      0,      0,    960,      0,      0,  -4740,    120,  -4104,   -468,   8256,      0,   -588,   8100,      0,  -6300,   7728,      0,   4008,   3144,      0,   -588,  10944,      0,  -8784,      0,      0,   2688,   8280,      0,   1584,   7104,      0,  -4452,   5436,  -1212,   -108,   2100,      0,  -1200,      0,
                                   6384,   4992,   6480,      0,      0,      0,      0,      0,      0,      0,      0,  11376,  -1356,   -960,  -3168,      0,     24,      0,  -2568,   1860,   5016,  -9864,  -6972,  -8256,      0,  -4440,    480, -10116,  -3768,  -7788,      0,   -672,  -5820,      0,  -2412,  -2868,      0,  -5964,   -852,  -9240,  -3060, -11376,  -2700,  -4068,   1020, -13908,  -5388,  -8856,  -2328,  -8148,   5868,   -204,  -3396,  10860,   2904,  -8760,   8544,    408,  -2244,  10764,    684,  -3156,  10656,   2976,  -7044,  13620,  -3012,   1920,   2340,   1488,  -1392,  10008,  -3804,  -9288,   6864,      0,      0,      0,   3012,   5868,      0,      0,      0,      0,      0,      0,      0,  -2472,   2592,      0,      0,      0,      0,      0,      0,      0,    840,      0,      0,      0,      0,      0,  -4356,   5772,      0,    816,  -1524,      0,      0,      0,      0,      0,      0,      0,  -1944,   -504,      0,  -2652,      0,      0,      0,      0,      0,   -828,   -516,      0,  -4836,      0,      0,   4788,   5616,   7308,   6312,   5940,   6420,      0,      0,      0,      0,  12096,   4812,   4764,   7032,  12228,   4872,      0,      0,      0,      0,      0,   4080,   4860,      0,   2340,   7704,   8688,  -9696,      0,      0,      0,   1152,      0,      0,      0,      0,      0,      0,      0,      0,   4860,      0,      0,      0,      0,      0,      0,      0,      0,   1140,      0,      0,      0,      0, -13680,  -2880,      0,      0,  -4284,      0,      0,      0,      0,      0,      0,      0,      0,  -4224,      0,      0,      0,      0,      0,      0,      0,      0,  -5160,      0,      0,  -4716,  -7884,  -8256,  -1272,   6216,      0,  -3492,   3108,      0,      0,      0,      0,      0,      0,      0,  -5052,   1908,      0,      0,      0,      0,      0,      0,      0,  -5328,   -600,      0,  -5532,   7836,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,      0,  -4104,    444,      0,      0,  -8688, -10980,  -3048,      0,      0,      0,      0,      0,      0,  -4296, -11364,      0,  -4356,      0,      0,      0,      0,      0,  -7020, -10704,  -6216,  -7116,      0,   6276,  -2688,   8124,      0,  -5208,   2184,   6060,  -4752,  14700,      0,      0,   9540,      0,  -6120,   3708,  -1908,   -972,  11544,      0,      0,  -7188,   6132,  -4020,  -2856,   3312,  -3192,   9072,  -3324,   7416,  -1224,   2544,  -5388,   5700,    888,      0,      0,    420,   5352,      0,  -2016,   -156,  -1668,   5424,      0,      0,  -1872,      0,  -5316,   3648,  -3360,      0,  -4152,  10284,   -336,   2220,   1068,   6852,  -5688,  -6000,      0,   -312,      0,      0,  -5664,  -1500,      0,  -1932,  -5556,      0,  -1584,  -9204,      0,   3648,  -3360,      0,  -6264,  -4236,      0,    576,   4068,  10200,  -4272,  11472,   2316,   2736,    648,   7044,  -2220,      0,   5148,  -3252,   6660,   4428,  -4956,   3900,   1476,  -2076,    408,      0,  -4152,  10284,   -336,    576,   4068,  10200,  -5700,  15684,   2172, -10980,   1704,      0,      0,   1956,      0,      0,      0,      0,      0,  11460,      0,      0,   2484,      0,      0,   4992,      0,      0,  -1368,      0,      0,    528,      0,      0,   1956,    552,  -8184,   -804,      0,      0,  -6876,      0,      0,  -8352,      0,      0,    888,      0,      0,  -6000,      0,      0, -12324,      0,      0,    528,      0,      0,  -4452,      0,      0,  -5664,    588,  -9108,  -2580,   -108,      0,  -8100,   2772,      0,  -7452,    420,      0,  -1344,    -84,      0,  -8208,  -1200,      0, -13920,   2916,      0,   1956,    552,      0,  -5664,    588,      0,  -7716,  -2880,    816,   2736,      0,      0,  -3792,   -480,   4560,      0,   8292,      0,      0,      0,      0,  -3576,  -6096,  -2760,   4944,   -276,   -372,      0,      0,  -7260,  -5148, -12972,   -312,   2232,   6120,  -9660,  -3552,  -7728,      0, -10380,  -7812, -10524,  -3108,  -6768,      0,  -7500,      0,      0,  -8112, -10920, -10116,  -9492,  -9996,  -7260,  -5148, -12972,  -5568,  -9372,  -8160, -13344,  -4188,  -8856,    660,  -4488,   9456, -11388,  -5352,  -2448,   3084,  -6612,  11880,  -5520,  -9732,   8100,  -6348, -10500,    168,  -5940, -14388,   6144,   -312,   2232,   6120, -13344,  -4188,  -8856,  -1704,  -6780,  12540];



/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/

 use std::time::{Instant, Duration};

 // ビットボードの定義
 type Bitboard = u64;
 
 
 // the number of pieces
 fn count_pieces(n: u64) -> isize {
     let v :i32;
 
     unsafe {
         v = core::arch::x86_64::_popcnt64(n as i64) as i32;
     }
 
     return v as isize;
 }
 
 // オセロ盤の状態を表す構造体
 pub struct OthelloBoard {
     black: Bitboard,   // 黒石の位置を表すビットボード
     white: Bitboard,   // 白石の位置を表すビットボード
 }

 impl Clone for OthelloBoard {
    fn clone(&self) -> OthelloBoard {
        OthelloBoard { black: self.black, white: self.white } 
}}
 
fn check_right(myboard:u64, opponent:u64, position: u64) -> u64{
 
    let mask = opponent & 0x7e7e7e7e7e7e7e7e;
    let mut result = mask & (position << 1);
    result |= mask & (result << 1);
    result |= mask & (result << 1);
    result |= mask & (result << 1);
    result |= mask & (result << 1);
    result |= mask & (result << 1);
    let mut mypiece:u64 = (result << 1) & myboard;
    mypiece |= mypiece >> 1;
    mypiece |= mypiece >> 2;
    mypiece |= mypiece >> 4;

    result &= mypiece;
    result
}

fn check_left(myboard:u64, opponent:u64, position: u64) -> u64{

    let mask = opponent & 0x7e7e7e7e7e7e7e7e;
    let mut result = mask & (position >> 1);
    result |= mask & (result >> 1);
    result |= mask & (result >> 1);
    result |= mask & (result >> 1);
    result |= mask & (result >> 1);
    result |= mask & (result >> 1);
    let mut mypiece:u64 = (result >> 1) & myboard;
    mypiece |= mypiece << 1;
    mypiece |= mypiece << 2;
    mypiece |= mypiece << 4;

    result &= mypiece;
    result
}

fn check_up(myboard:u64, opponent:u64, position: u64) -> u64{

    let mask = opponent & 0x00FFFFFFFFFFFF00;
    let mut result = mask & (position >> 8);
    result |= mask & (result >> 8);
    result |= mask & (result >> 8);
    result |= mask & (result >> 8);
    result |= mask & (result >> 8);
    result |= mask & (result >> 8);
    let mut mypiece:u64 = (result >> 8) & myboard;
    mypiece |= mypiece << 8;
    mypiece |= mypiece << 16;
    mypiece |= mypiece << 32;

    result &= mypiece;
    result
}

fn check_down(myboard:u64, opponent:u64, position: u64) -> u64{

    let mask = opponent & 0x00FFFFFFFFFFFF00;
    let mut result = mask & (position << 8);
    result |= mask & (result << 8);
    result |= mask & (result << 8);
    result |= mask & (result << 8);
    result |= mask & (result << 8);
    result |= mask & (result << 8);
    let mut mypiece:u64 = (result << 8) & myboard;
    mypiece |= mypiece >> 8;
    mypiece |= mypiece >> 16;
    mypiece |= mypiece >> 32;

    result &= mypiece;
    result
}

fn check_diagonally_upright(myboard:u64, opponent:u64, position: u64) -> u64{

    let mask = opponent & 0x007E7E7E7E7E7E00;
    let mut result = mask & (position >> 7);
    result |= mask & (result >> 7);
    result |= mask & (result >> 7);
    result |= mask & (result >> 7);
    result |= mask & (result >> 7);
    result |= mask & (result >> 7);
    let mut mypiece:u64 = (result >> 7) & myboard;
    mypiece |= mypiece << 7;
    mypiece |= mypiece << 14;
    mypiece |= mypiece << 28 ;

    result &= mypiece;
    result
}

fn check_diagonally_upleft(myboard:u64, opponent:u64, position: u64) -> u64{

    let mask = opponent & 0x007E7E7E7E7E7E00;
    let mut result = mask & (position >> 9);
    result |= mask & (result >> 9);
    result |= mask & (result >> 9);
    result |= mask & (result >> 9);
    result |= mask & (result >> 9);
    result |= mask & (result >> 9);
    let mut mypiece:u64 = (result >> 9) & myboard;
    mypiece |= mypiece << 9;
    mypiece |= mypiece << 18;
    mypiece |= mypiece << 36;

    result &= mypiece;
    result
}

fn check_diagonally_downright(myboard:u64, opponent:u64, position: u64) -> u64{

    let mask = opponent & 0x007E7E7E7E7E7E00;
    let mut result = mask & (position << 9);
    result |= mask & (result << 9);
    result |= mask & (result << 9);
    result |= mask & (result << 9);
    result |= mask & (result << 9);
    result |= mask & (result << 9);
    let mut mypiece:u64 = (result << 9) & myboard;
    mypiece |= mypiece >> 9;
    mypiece |= mypiece >> 18;
    mypiece |= mypiece >> 36;

    result &= mypiece;
    result
}

fn check_diagonally_downleft(myboard:u64, opponent:u64, position: u64) -> u64{

    let mask = opponent & 0x007E7E7E7E7E7E00;
    let mut result = mask & (position << 7);
    result |= mask & (result << 7);
    result |= mask & (result << 7);
    result |= mask & (result << 7);
    result |= mask & (result << 7);
    result |= mask & (result << 7);
    let mut mypiece:u64 = (result << 7) & myboard;
    mypiece |= mypiece >> 7;
    mypiece |= mypiece >> 14;
    mypiece |= mypiece >> 28;

    result &= mypiece;
    result
}

fn valids(myboard:u64, opponent:u64) -> u64{
    let akikoma = !(myboard | opponent);
    let mut mask = opponent & 0x7e7e7e7e7e7e7e7e;
    let mut valids:u64 = 0;
    let mut result = mask & (myboard << 1);
    result |= mask & (result << 1);
    result |= mask & (result << 1);
    result |= mask & (result << 1);
    result |= mask & (result << 1);
    result |= mask & (result << 1);
    valids |= result << 1;

    result = mask & (myboard >> 1);
    result |= mask & (result >> 1);
    result |= mask & (result >> 1);
    result |= mask & (result >> 1);
    result |= mask & (result >> 1);
    result |= mask & (result >> 1);
    valids |= result >> 1;


    mask = opponent & 0x00FFFFFFFFFFFF00;
    result = mask & (myboard >> 8);
    result |= mask & (result >> 8);
    result |= mask & (result >> 8);
    result |= mask & (result >> 8);
    result |= mask & (result >> 8);
    result |= mask & (result >> 8);
    valids |= result >> 8;

    result = mask & (myboard << 8);
    result |= mask & (result << 8);
    result |= mask & (result << 8);
    result |= mask & (result << 8);
    result |= mask & (result << 8);
    result |= mask & (result << 8);
    valids |= result << 8;

    mask = opponent & 0x007E7E7E7E7E7E00;
    result = mask & (myboard >> 7);
    result |= mask & (result >> 7);
    result |= mask & (result >> 7);
    result |= mask & (result >> 7);
    result |= mask & (result >> 7);
    result |= mask & (result >> 7);
    valids |= result >> 7;

    result = mask & (myboard >> 9);
    result |= mask & (result >> 9);
    result |= mask & (result >> 9);
    result |= mask & (result >> 9);
    result |= mask & (result >> 9);
    result |= mask & (result >> 9);
    valids |= result >> 9;

    result = mask & (myboard << 9);
    result |= mask & (result << 9);
    result |= mask & (result << 9);
    result |= mask & (result << 9);
    result |= mask & (result << 9);
    result |= mask & (result << 9);
    valids |= result << 9;

    result = mask & (myboard << 7);
    result |= mask & (result << 7);
    result |= mask & (result << 7);
    result |= mask & (result << 7);
    result |= mask & (result << 7);
    result |= mask & (result << 7);
    valids |= result << 7;

    return valids & akikoma;
}

fn valid_board(myboard:u64, opponent:u64, position: u64) -> u64{
        check_right(myboard, opponent, position) 
        | check_left(myboard, opponent, position) 
        | check_down(myboard, opponent, position)
        | check_up(myboard, opponent, position)
        | check_diagonally_upright(myboard, opponent, position)
        | check_diagonally_upleft(myboard, opponent, position)
        | check_diagonally_downright(myboard, opponent, position)
        | check_diagonally_downleft(myboard, opponent, position)
}

fn evaluation1(board1 : u64, board2 : u64) -> i32 {
   let siro0 = 1 * ((board1 >>  0) & 1) + 3 * ((board1 >>  1) & 1) + 9 * ((board1 >>  2) & 1) + 27 * ((board1 >>  3) & 1) + 81 * ((board1 >>  4) & 1) + 243 * ((board1 >>  5) & 1) + 729 * ((board1 >>  6) & 1) + 2187 * ((board1 >>  7) & 1);
   let siro1 = 1 * ((board1 >>  7) & 1) + 3 * ((board1 >> 15) & 1) + 9 * ((board1 >> 23) & 1) + 27 * ((board1 >> 31) & 1) + 81 * ((board1 >> 39) & 1) + 243 * ((board1 >> 47) & 1) + 729 * ((board1 >> 55) & 1) + 2187 * ((board1 >> 63) & 1);
   let siro2 = 1 * ((board1 >> 63) & 1) + 3 * ((board1 >> 62) & 1) + 9 * ((board1 >> 61) & 1) + 27 * ((board1 >> 60) & 1) + 81 * ((board1 >> 59) & 1) + 243 * ((board1 >> 58) & 1) + 729 * ((board1 >> 57) & 1) + 2187 * ((board1 >> 56) & 1);
   let siro3 = 1 * ((board1 >> 56) & 1) + 3 * ((board1 >> 48) & 1) + 9 * ((board1 >> 40) & 1) + 27 * ((board1 >> 32) & 1) + 81 * ((board1 >> 24) & 1) + 243 * ((board1 >> 16) & 1) + 729 * ((board1 >>  8) & 1) + 2187 * ((board1 >>  0) & 1);
   let siro4 = 1 * ((board1 >>  0) & 1) + 3 * ((board1 >>  9) & 1) + 9 * ((board1 >> 18) & 1) + 27 * ((board1 >> 27) & 1) + 81 * ((board1 >> 36) & 1) + 243 * ((board1 >> 45) & 1) + 729 * ((board1 >> 54) & 1) + 2187 * ((board1 >> 63) & 1);
   let siro5 = 1 * ((board1 >>  7) & 1) + 3 * ((board1 >> 14) & 1) + 9 * ((board1 >> 21) & 1) + 27 * ((board1 >> 28) & 1) + 81 * ((board1 >> 35) & 1) + 243 * ((board1 >> 42) & 1) + 729 * ((board1 >> 49) & 1) + 2187 * ((board1 >> 56) & 1);
   let siro6 = 1 * ((board1 >>  0) & 1) + 3 * ((board1 >>  1) & 1) + 9 * ((board1 >>  2) & 1) + 27 * ((board1 >>  8) & 1) + 81 * ((board1 >>  9) & 1) + 243 * ((board1 >> 10) & 1) + 729 * ((board1 >> 16) & 1) + 2187 * ((board1 >> 17) & 1);
   let siro7 = 1 * ((board1 >>  7) & 1) + 3 * ((board1 >> 15) & 1) + 9 * ((board1 >> 23) & 1) + 27 * ((board1 >>  6) & 1) + 81 * ((board1 >> 14) & 1) + 243 * ((board1 >> 22) & 1) + 729 * ((board1 >>  5) & 1) + 2187 * ((board1 >> 13) & 1);
   let siro8 = 1 * ((board1 >> 63) & 1) + 3 * ((board1 >> 62) & 1) + 9 * ((board1 >> 61) & 1) + 27 * ((board1 >> 55) & 1) + 81 * ((board1 >> 54) & 1) + 243 * ((board1 >> 53) & 1) + 729 * ((board1 >> 47) & 1) + 2187 * ((board1 >> 46) & 1);
   let siro9 = 1 * ((board1 >> 56) & 1) + 3 * ((board1 >> 48) & 1) + 9 * ((board1 >> 40) & 1) + 27 * ((board1 >> 57) & 1) + 81 * ((board1 >> 49) & 1) + 243 * ((board1 >> 41) & 1) + 729 * ((board1 >> 58) & 1) + 2187 * ((board1 >> 50) & 1);
   let kuro0 = 1 * ((board2 >>  0) & 1) + 3 * ((board2 >>  1) & 1) + 9 * ((board2 >>  2) & 1) + 27 * ((board2 >>  3) & 1) + 81 * ((board2 >>  4) & 1) + 243 * ((board2 >>  5) & 1) + 729 * ((board2 >>  6) & 1) + 2187 * ((board2 >>  7) & 1);
   let kuro1 = 1 * ((board2 >>  7) & 1) + 3 * ((board2 >> 15) & 1) + 9 * ((board2 >> 23) & 1) + 27 * ((board2 >> 31) & 1) + 81 * ((board2 >> 39) & 1) + 243 * ((board2 >> 47) & 1) + 729 * ((board2 >> 55) & 1) + 2187 * ((board2 >> 63) & 1);
   let kuro2 = 1 * ((board2 >> 63) & 1) + 3 * ((board2 >> 62) & 1) + 9 * ((board2 >> 61) & 1) + 27 * ((board2 >> 60) & 1) + 81 * ((board2 >> 59) & 1) + 243 * ((board2 >> 58) & 1) + 729 * ((board2 >> 57) & 1) + 2187 * ((board2 >> 56) & 1);
   let kuro3 = 1 * ((board2 >> 56) & 1) + 3 * ((board2 >> 48) & 1) + 9 * ((board2 >> 40) & 1) + 27 * ((board2 >> 32) & 1) + 81 * ((board2 >> 24) & 1) + 243 * ((board2 >> 16) & 1) + 729 * ((board2 >>  8) & 1) + 2187 * ((board2 >>  0) & 1);
   let kuro4 = 1 * ((board2 >>  0) & 1) + 3 * ((board2 >>  9) & 1) + 9 * ((board2 >> 18) & 1) + 27 * ((board2 >> 27) & 1) + 81 * ((board2 >> 36) & 1) + 243 * ((board2 >> 45) & 1) + 729 * ((board2 >> 54) & 1) + 2187 * ((board2 >> 63) & 1);
   let kuro5 = 1 * ((board2 >>  7) & 1) + 3 * ((board2 >> 14) & 1) + 9 * ((board2 >> 21) & 1) + 27 * ((board2 >> 28) & 1) + 81 * ((board2 >> 35) & 1) + 243 * ((board2 >> 42) & 1) + 729 * ((board2 >> 49) & 1) + 2187 * ((board2 >> 56) & 1);
   let kuro6 = 1 * ((board2 >>  0) & 1) + 3 * ((board2 >>  1) & 1) + 9 * ((board2 >>  2) & 1) + 27 * ((board2 >>  8) & 1) + 81 * ((board2 >>  9) & 1) + 243 * ((board2 >> 10) & 1) + 729 * ((board2 >> 16) & 1) + 2187 * ((board2 >> 17) & 1);
   let kuro7 = 1 * ((board2 >>  7) & 1) + 3 * ((board2 >> 15) & 1) + 9 * ((board2 >> 23) & 1) + 27 * ((board2 >>  6) & 1) + 81 * ((board2 >> 14) & 1) + 243 * ((board2 >> 22) & 1) + 729 * ((board2 >>  5) & 1) + 2187 * ((board2 >> 13) & 1);
   let kuro8 = 1 * ((board2 >> 63) & 1) + 3 * ((board2 >> 62) & 1) + 9 * ((board2 >> 61) & 1) + 27 * ((board2 >> 55) & 1) + 81 * ((board2 >> 54) & 1) + 243 * ((board2 >> 53) & 1) + 729 * ((board2 >> 47) & 1) + 2187 * ((board2 >> 46) & 1);
   let kuro9 = 1 * ((board2 >> 56) & 1) + 3 * ((board2 >> 48) & 1) + 9 * ((board2 >> 40) & 1) + 27 * ((board2 >> 57) & 1) + 81 * ((board2 >> 49) & 1) + 243 * ((board2 >> 41) & 1) + 729 * ((board2 >> 58) & 1) + 2187 * ((board2 >> 50) & 1);
   let mut score : i32 = 0;
   score += HYOUKA1[3280 + (siro0 as usize) - (kuro0 as usize)];
   score += HYOUKA1[3280 + (siro1 as usize) - (kuro1 as usize)];
   score += HYOUKA1[3280 + (siro2 as usize) - (kuro2 as usize)];
   score += HYOUKA1[3280 + (siro3 as usize) - (kuro3 as usize)];
   score += HYOUKA2[3280 + (siro4 as usize) - (kuro4 as usize)];
   score += HYOUKA2[3280 + (siro5 as usize) - (kuro5 as usize)];
   score += HYOUKA3[3280 + (siro6 as usize) - (kuro6 as usize)];
   score += HYOUKA3[3280 + (siro7 as usize) - (kuro7 as usize)];
   score += HYOUKA3[3280 + (siro8 as usize) - (kuro8 as usize)];
   score += HYOUKA3[3280 + (siro9 as usize) - (kuro9 as usize)];
   score += 1500 * (valids(board1, board2).count_ones() as i32) - 1500 * (valids(board2, board1).count_ones() as i32);
   score /= 20;
   if score >  9998 { return  9998; }
   if score < -9998 { return -9998; }
   return score;
}

impl OthelloBoard {
    // 新しい空のオセロ盤を作成する関数
    pub fn new() -> OthelloBoard {
        OthelloBoard {
            black: (1 << 28) | (1 << 35),
            white: (1 << 27) | (1 << 36),
        }
    }

    pub fn subtract(&self, color:usize) -> isize{
        let black_number = count_pieces(self.black);
        let white_number = count_pieces(self.white);
        let sub = black_number - white_number;

        if color == 0{
            // color is black
            if sub == 0{
               return 1;
            }else{
               return sub;
            }
        }else{
            // color is white
            if sub == 0{
               return 1;
            }else{
               return -sub;
            }
        }
    }

    // 盤面の状態を表示する関数
    pub fn print(&self, color: usize) {
        println!("  A B C D E F G H");

        let valid = self.valid_pieces(color);
        for row in 0..8 {
            let rows = row + 1;
            print!("{} ",rows);
            for col in 0..8 {
                let pos = row * 8 + col;
                let bit = 1 << pos;

                if (self.black & bit) != 0 {
                    print!("B ");
                } else if (self.white & bit) != 0 {
                    print!("W ");
                } else {
                    let num = valid[pos as usize];
                    if num == 0{
                        print!("- ");
                    }else{
                        print!("{} ",num);
                    }
                    
                }
            }
            println!();
        }
    }

    fn valid_total(&self, position: u64, color: usize) -> usize{
        if color == 0{
            count_pieces(valid_board(self.black, self.white, position)) as usize
        }else{
            count_pieces(valid_board(self.white, self.black, position)) as usize
        }
    }

    pub fn valid_pieces(&self, color: usize) -> Vec<usize>{
         let mut position: u64 = 1;
         let mut pos:usize = 0;
         let mut getting_number: Vec<usize> = Vec::new();
         let mut valid_pos: Vec<usize> = Vec::new();
         let mut arrangements:usize = 0;
        loop {
            if self.black & position != 0 || self.white & position != 0 {
                getting_number.push(0);
            }
            else{
                let total = self.valid_total(position, color);
                if total > 0{
                    arrangements += 1;
                    valid_pos.push(pos);
                }
                getting_number.push(total);
            }

            position <<= 1;
            pos += 1;

            if position == 0 {
                break;
            }
        }
        getting_number.push(arrangements);
        getting_number.extend(valid_pos);

        return getting_number;
    }

    fn change_pieces(&mut self, position: u64, color: usize){
        if color == 0{
            let board= valid_board(self.black, self.white, position);
            self.black |= board;
            self.white &= !board;
        }else{
            let board= valid_board(self.white, self.black, position);
            self.white |= board;
            self.black &= !board;
        }
    }

    pub fn add(&mut self, bit: usize, turn: &mut usize){
        let position = 1 << bit as u64;
        if *turn == 0 { //black's turn
            self.black |= position;

            self.change_pieces(position,*turn);

            *turn = 1;
        }else{ // white's turn
            self.white |= position;

            self.change_pieces(position,*turn);
            
            *turn = 0;
        }
    }

    pub fn add2(&self, position: u64, turn: usize)-> OthelloBoard{
        let mut board2 = OthelloBoard {
            black: self.black,
            white: self.white,
        };
        if turn == 0 { //black's turn
            board2.black |= position;

            board2.change_pieces(position,turn);

        }else{ // white's turn
            board2.white |= position;

            board2.change_pieces(position,turn);
        
        }
        board2
    }

    pub fn make_1_next_boards2_5(&self, color: usize) -> Vec<(OthelloBoard,u64,isize)>{
       let board = OthelloBoard {
           black: self.black,
           white: self.white,
       };

       let mut valid:u64;
       let myvalid_count:isize;
       let oppvalid_count:isize;

       if color == 0{
           valid = valids(self.black,self.white);
           myvalid_count = count_pieces(valid);
           oppvalid_count = count_pieces(valids(self.white,self.black));
           
       }else{
           valid = valids(self.white,self.black);
           myvalid_count = count_pieces(valid);
           oppvalid_count = count_pieces(valids(self.black,self.white));
       }

       let mut nextboards:Vec<(OthelloBoard,u64,isize)> = vec![];

       let mut check = valid;
       let mut nokori = valid;
       let k = count_pieces(valid);

       for _ in 0..k {

           valid = nokori;
           valid >>= 1;
           valid |= valid >> 1;
           valid |= valid >> 2;
           valid |= valid >> 4;
           valid |= valid >> 8;
           valid |= valid >> 16;
           valid |= valid >> 32;
           check &= !(valid);

           let next_board = board.add2(check, color);

           let score = myvalid_count*oppvalid_count;
           //println!("score:{}",score);
           nextboards.push((next_board, check ,score));

           nokori &= !(check);
           check = nokori;
       }

       nextboards.sort_by(|a, b| a.2.cmp(&b.2)); //a < b
       return nextboards;
           
   }

    pub fn make_1_next_boards1_5_2(&self, color:usize) -> Vec<(OthelloBoard,u64)>{
       let akikoma = !(self.white | self.black);
       let mut color2 = color;

       if akikoma == 0 {
           return vec![];
       }

       let mut valid:u64;

       if color == 0{
           valid = valids(self.black,self.white);
           if valid == 0 {
               color2 = 0b1 ^ color;
               valid = valids(self.white,self.black);
                   if valid == 0{
                       return vec![];
                   }
           }
       }else{
           valid = valids(self.white,self.black);
           if valid == 0 {
               color2 = 0b1 ^ color;
               valid = valids(self.black,self.white);
                   if valid == 0{
                       return vec![];
                   }
           }
       }

       let mut nextboards_sub:Vec<(OthelloBoard,u64,isize)> = vec![(OthelloBoard{ black: 0, white: (0b1 ^ color2) as u64, },0,isize::MIN)];

       let mut check = valid;
       let mut nokori = valid;
       let k = count_pieces(valid);

       for _ in 0..k {

           valid = nokori;
           valid >>= 1;
           valid |= valid >> 1;
           valid |= valid >> 2;
           valid |= valid >> 4;
           valid |= valid >> 8;
           valid |= valid >> 16;
           valid |= valid >> 32;
           check &= !(valid);

           let next_board = self.add2(check, color2);

           if color2 == 1{
               valid = valids(next_board.black,next_board.white);
           }else{
               valid = valids(next_board.white,next_board.black);
           }

           nextboards_sub.push((next_board,check,count_pieces(valid)));
           
           
           nokori &= !(check);
           check = nokori;
       }

       nextboards_sub.sort_by(|a, b| a.2.cmp(&b.2)); //降順 a<b

       let first_elements: Vec<(_,_)> = nextboards_sub.iter().map(|(first, second, _)| ((OthelloBoard { black: first.black, white: first.white }),*second)).collect();

       return  first_elements;

   }

   fn eval_board_for_last(&self, color:usize) -> isize{
       let myvalid:u64;
       let oppvalid:u64;
       let myboard:u64;
       let oppboard:u64;

       if color == 0{
           myboard = self.black;
           oppboard = self.white;
           myvalid = valids(self.black,self.white);
           oppvalid = valids(self.white,self.black);
           if myvalid | oppvalid == 0{
               if self.subtract(color) > 0{
                   return 100000;
               }else{
                   return -100000;
               }
           }
       }else{
           myboard = self.white;
           oppboard = self.black;
           myvalid = valids(self.white,self.black);
           oppvalid = valids(self.black,self.white);
           if myvalid | oppvalid == 0{
               if self.subtract(color) > 0{
                   return 5000;
               }else{
                   return -5000;
               }
           }
       }
       
       return evaluation1(myboard,oppboard) as isize;
   }

    fn eval_mini_max_sub2(&self, color: usize, turn: usize, times:&mut u64, n:usize, alpha:isize, memo_eval: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64,isize)>> ,memo_banmen: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64)>>,memo_banmen_pre: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64)>>, start_time: Instant, timeout: Duration)->isize{
       *times += 1;

       let aite = color^0b1;
       let mut return_count:isize;
       let mut now_count:isize;
       let mut beta = isize::MIN;
       let n_1 = n - 1;

       if let Some(value) = (*memo_banmen_pre).get(&(self.black,self.white)){
          if value.is_empty() || n == 0{
              return self.eval_board_for_last(color);
          }

          let copied:Vec<(OthelloBoard, u64)> = value.iter().skip(1).cloned().collect();
  
          if value[0].0.white != color as u64{
              return_count = isize::MIN;
              for (board,_) in copied {

                   let elapsed_time = start_time.elapsed();

                   if elapsed_time >= timeout {
                       return -777;
                   }

                   now_count = board.eval_mini_max_sub2(color, aite, times, n_1,beta, memo_eval, memo_banmen,memo_banmen_pre,start_time,timeout);
                   
                   if return_count < now_count {
                       if alpha == isize::MIN || alpha > now_count{
                           return_count = now_count;  
                           beta = now_count;
                       }else{
                           return_count = now_count;
                           break;
                       }
                   }
                      
              }

          } else{
              return_count = isize::MAX;
              for (board,_) in copied {
                   let elapsed_time = start_time.elapsed();

                   if elapsed_time >= timeout {
                       return -777;
                   }
                      now_count = board.eval_mini_max_sub2(color, color, times, n_1,beta,  memo_eval, memo_banmen,memo_banmen_pre,start_time,timeout);

                      if return_count > now_count {
                          if alpha == isize::MIN || alpha < now_count{
                              return_count = now_count;  
                              beta = now_count;
                          }else{
                              return_count = now_count;
                              break;
                          }
                          
                      }
              }
          }
          return return_count;
       }
       else{
          let boards = self.make_1_next_boards1_5_2(turn);
      
          if boards.is_empty() || n == 0{
               memo_banmen_pre.insert((self.black,self.white),boards);
               return self.eval_board_for_last(color);
          }
  
          if boards[0].0.white != color as u64{
              return_count = isize::MIN;
              for (board,_) in boards.iter().skip(1) {
                   let elapsed_time = start_time.elapsed();

                   if elapsed_time >= timeout {
                       memo_banmen_pre.insert((self.black,self.white),boards);
                       return -777;
                   }

                      now_count = board.eval_mini_max_sub2(color, aite, times, n_1,beta, memo_eval, memo_banmen,memo_banmen_pre,start_time,timeout);
                      
                      if return_count < now_count {
                          if alpha == isize::MIN || alpha > now_count{
                              return_count = now_count;  
                              beta = now_count;
                          }else{
                              return_count = now_count;
                              break;
                          }
                      }
                      
              }
          } else{
              return_count = isize::MAX;
              for (board,_) in boards.iter().skip(1) {
                   let elapsed_time = start_time.elapsed();

                   if elapsed_time >= timeout {
                       memo_banmen_pre.insert((self.black,self.white),boards);
                       return -777;
                   }
                      now_count = board.eval_mini_max_sub2(color, color, times, n_1,beta,  memo_eval, memo_banmen,memo_banmen_pre,start_time,timeout); 

                      if return_count > now_count {
                          if alpha == isize::MIN || alpha < now_count{
                              return_count = now_count;  
                              beta = now_count;
                          }else{
                              return_count = now_count;
                              break;
                          }
                          
                      }
              }
              
          }

          memo_banmen_pre.insert((self.black,self.white),boards);

          return return_count;
          
       }
   }

    fn eval_mini_max_sub(&self, color: usize, turn: usize, times:&mut u64, n:usize, alpha:isize, memo_eval: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64,isize)>> ,memo_banmen: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64)>>,memo_banmen_pre: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64)>>, start_time: Instant, timeout: Duration)->isize{
       let elapsed_time = start_time.elapsed();

       if elapsed_time >= timeout {
           return -777;
       }

        let mut memo:Vec<(OthelloBoard,u64,isize)> = vec![];
        let boards: Vec<(OthelloBoard,u64)>;
        let mut return_count:isize;
        let mut now_count:isize = 0;
        let mut beta = isize::MIN;
        let n_1 = n-1;


        if let Some(value) = (*memo_banmen_pre).get(&(self.black,self.white)){
           //println!("Cash Hit BANMEN");
           if value.is_empty() || n == 0{
               return self.eval_board_for_last(color);
           }

           let copied:Vec<(OthelloBoard, u64)> = value.iter().skip(1).cloned().collect();
   
           if value[0].0.white != color as u64{
               return_count = isize::MIN;
               let mut alpha_mode = 0;
               for (board,pos) in copied {
                   if alpha_mode == 0{
                       now_count = board.eval_mini_max_sub2(color, color^0b1, times, n_1,beta, memo_eval, memo_banmen,memo_banmen_pre,start_time,timeout);

                       memo.push((OthelloBoard{black:board.black,white:board.white},pos,now_count));
                       
                       if return_count < now_count {
                           if alpha == isize::MIN || alpha > now_count{
                               return_count = now_count;  
                               beta = now_count;
                           }else{
                               return_count = now_count;
                               alpha_mode = 1;
                               now_count -= 100;
                           }
                       }
                   }else{
                       memo.push((OthelloBoard{black:board.black,white:board.white},pos,now_count));
                   }
                       
               }
               memo.sort_by(|a, b| b.2.cmp(&a.2)); //a>b
               memo_eval.insert((self.black,self.white), memo);
               return return_count;

           } else{
               return_count = isize::MAX;
               for (board,_) in copied {

                       now_count = board.eval_mini_max_sub(color, color, times, n_1,beta,  memo_eval, memo_banmen,memo_banmen_pre,start_time,timeout); 

                       if return_count > now_count {
                           if alpha == isize::MIN || alpha < now_count{
                               return_count = now_count;  
                               beta = now_count;
                           }else{
                               return now_count;
                           }
                           
                       }
               }
               return return_count;
           }
        }
        else{
           //println!("No HIt");
           boards = self.make_1_next_boards1_5_2(turn);
       
           if boards.is_empty() || n == 0{
               return self.eval_board_for_last(color);
           }
   
           if boards[0].0.white != color as u64{
               return_count = isize::MIN;
               let mut alpha_mode = 0;
               for (board,pos) in boards.iter().skip(1) {
                   if alpha_mode == 0{
                       now_count = board.eval_mini_max_sub2(color, color^0b1, times, n_1,beta, memo_eval, memo_banmen,memo_banmen_pre,start_time,timeout);

                       memo.push((OthelloBoard{black:board.black,white:board.white},*pos,now_count));
                       
                       if return_count < now_count {
                           if alpha == isize::MIN || alpha > now_count{
                               return_count = now_count;  
                               beta = now_count;
                           }else{
                               return_count = now_count;
                               alpha_mode = 1;
                               now_count -= 100;
                           }
                       }
                   }else{
                       memo.push((OthelloBoard{black:board.black,white:board.white},*pos,now_count));
                   }
                       
               }
               memo.sort_by(|a, b| b.2.cmp(&a.2)); //a>b
               memo_eval.insert((self.black,self.white), memo);
           } else{
               return_count = isize::MAX;
               for (board,_) in boards.iter().skip(1) {

                       now_count = board.eval_mini_max_sub(color, color, times, n_1,beta,  memo_eval, memo_banmen,memo_banmen_pre,start_time,timeout); 

                       if return_count > now_count {
                           if alpha == isize::MIN || alpha < now_count{
                               return_count = now_count;  
                               beta = now_count;
                           }else{
                               return_count = now_count;
                               break;
                           }
                           
                       }
               }
               
           }
           return return_count;
           
        }
    }

    fn eval_mini_max(&self, color: usize, start_time: Instant, timeout: Duration, n:&mut usize, memo_eval: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64,isize)>> ,memo_eval_pre: &HashMap<(u64,u64),Vec<(OthelloBoard,u64,isize)>> ,memo_banmen: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64)>>,memo_banmen_pre: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64)>>)-> usize{
       let mut return_count:isize = isize::MIN;
       let mut now_count:isize;
       let mut beta = isize::MIN;
       let mut times= 0;
       let aite = color^0b1;
       let n_1 = *n-1;
       let mut return_pos = 0;
       let mut counter = 0;
       let mut counter2 = 0;

       if let Some(value) = (*memo_eval_pre).get(&(self.black,self.white)) {

           for (board,pos,score) in value {
               let elapsed_time = start_time.elapsed();
               if elapsed_time > timeout{
                   now_count = *score;
                   counter += 1;
               }else{
                   now_count = (*board).eval_mini_max_sub(color, aite, &mut times, n_1,beta, memo_eval,memo_banmen,memo_banmen_pre, start_time, timeout);
                   if now_count == -777 {
                       now_count = *score;
                   }
                   counter2 += 1;
               }

               println!("score:{}",now_count);

               if return_count < now_count {
                       return_count = now_count;  
                       beta = now_count;
                       return_pos = *pos;
               }
           
           }

       } else {
           //println!("No Hit");
           let boards: Vec<(OthelloBoard, u64, isize)> = self.make_1_next_boards2_5(color);

           for (board,check,_) in boards {
                   let elapsed_time = start_time.elapsed();
                   if elapsed_time > timeout{
                       *n -= 1;
                       break;
                   }else{
                       now_count = board.eval_mini_max_sub(color, aite, &mut times, n_1,beta, memo_eval, memo_banmen,memo_banmen_pre, start_time, timeout);
                       println!("score:{}",now_count);
                       if return_count < now_count {
                               return_count = now_count;  
                               beta = now_count;
                               return_pos = check;
                       }
                   }
               
           }
       }

       if counter > counter2 {
           *n -= 1;
       }

        let mut position = return_pos >> 1;
        position |= position >> 1;
        position |= position >> 2;
        position |= position >> 4;
        position |= position >> 8;
        position |= position >> 16;
        position |= position >> 32;

        return count_pieces(position) as usize;
    }

    pub fn eval_boards(&self, color: usize, count: usize, n: &mut usize, start_time: Instant, timeout: Duration, memo_banmen: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64)>>, memo_banmen_pre: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64)>>, memo_yomikiri: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64,isize)>>,memo_eval: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64,isize)>>,memo_eval_pre: &HashMap<(u64,u64),Vec<(OthelloBoard,u64,isize)>>)-> usize{
        if count > 39{//montecalro max 51
                      //a-b max 43 43が1手読める程度
                      //44-45が割れ目か　念のため44-46で計測する必要あり
                      //43-41は不確定切りが必要か
            return self.last_eval_mini_max(color, start_time, timeout, n, memo_eval, memo_eval_pre,memo_banmen,memo_banmen_pre);
        }else{

            println!("depth:{}",*n);
            return self.eval_mini_max(color, start_time, timeout, n, memo_eval, memo_eval_pre,memo_banmen,memo_banmen_pre);
        }
        
    }

   fn last_eval_mini_max_sub2(&self, color: usize, turn: usize)->isize{

       let boards: Vec<(OthelloBoard,u64)>;
       let mut return_count:isize;
       let mut now_count:isize;
       let aite = color^0b1;

          boards = self.make_1_next_boards1_5_2(turn);
      
          if boards.is_empty(){
               return 50000*self.subtract(color);
          }
  
          if boards[0].0.white != color as u64{
              return_count = isize::MIN;
              for (board,_) in boards.iter().skip(1) {

                      now_count = board.last_eval_mini_max_sub2(color, aite);
                      
                      if now_count > 99999{
                       return_count = now_count;
                       break;
                      }else if now_count > return_count{
                       return_count = now_count;
                      }
                      
              }
          } else{
              return_count = isize::MAX;
              for (board,_) in boards.iter().skip(1) {

                      now_count = board.last_eval_mini_max_sub2(color, color); 

                      if now_count < -99999{
                       return_count = now_count;
                       break;
                      } else if return_count > now_count {
                          return_count = now_count;
                      }
              }
              
          }
          return return_count;
   }

   fn last_eval_mini_max_sub3(&self, color: usize, turn: usize, times:&mut u64, n:usize, memo_eval: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64,isize)>> ,memo_banmen: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64)>>,memo_banmen_pre: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64)>>, start_time: Instant, timeout: Duration)->isize{
       *times += 1;

       if count_pieces(self.black | self.white) > 54{
           return self.last_eval_mini_max_sub2(color, turn);
       }

       let boards: Vec<(OthelloBoard,u64)>;
       let mut return_count:isize;
       let mut now_count:isize;
       let n_1 = n - 1;


       if let Some(value) = (*memo_banmen_pre).get(&(self.black,self.white)){
          if value.is_empty(){
              return 50000*self.subtract(color);
          }

          let copied:Vec<(OthelloBoard, u64)> = value.iter().skip(1).cloned().collect();
  
          if value[0].0.white != color as u64{
              return_count = isize::MIN;
              for (board,_) in copied {
                       let elapsed_time = start_time.elapsed();

                       if elapsed_time >= timeout {
                           return -777;
                       }

                      now_count = board.last_eval_mini_max_sub3(color, color^0b1, times, n_1,memo_eval, memo_banmen,memo_banmen_pre,start_time,timeout);

                   //    memo.push((OthelloBoard{black:board.black,white:board.white},*pos,now_count));
                      
                      if now_count > 99999{
                       return_count = now_count;
                       break;
                      }else if now_count > return_count{
                       return_count = now_count;
                      }
                      
              }

          } else{
              return_count = isize::MAX;
              for (board,_) in copied {
                   let elapsed_time = start_time.elapsed();

                   if elapsed_time >= timeout {
                       return -777;
                   }

                      now_count = board.last_eval_mini_max_sub3(color, color, times, n_1,memo_eval, memo_banmen,memo_banmen_pre,start_time,timeout); 

                      if now_count < -99999{
                       return_count = now_count;
                       break;
                      } else if return_count > now_count {
                          return_count = now_count;
                      }
              }

          }
          return return_count;
       }
       else{
          boards = self.make_1_next_boards1_5_2(turn);
      
          if boards.is_empty(){
               return 50000*self.subtract(color);
          }
  
          if boards[0].0.white != color as u64{
              return_count = isize::MIN;
              for (board,_) in boards.iter().skip(1) {
                   let elapsed_time = start_time.elapsed();

                   if elapsed_time >= timeout {
                       return -777;
                   }

                      now_count = board.last_eval_mini_max_sub3(color, color^0b1, times, n_1,memo_eval, memo_banmen,memo_banmen_pre,start_time,timeout);

                      //memo.push((OthelloBoard{black:board.black,white:board.white},*pos,now_count));
                      
                      if now_count > 99999{
                       return_count = now_count;
                       break;
                      }else if now_count > return_count{
                       return_count = now_count;
                      }
                      
              }
          } else{
              return_count = isize::MAX;
              for (board,_) in boards.iter().skip(1) {
                   let elapsed_time = start_time.elapsed();

                   if elapsed_time >= timeout {
                       return -777;
                   }

                      now_count = board.last_eval_mini_max_sub3(color, color, times, n_1,memo_eval, memo_banmen,memo_banmen_pre,start_time,timeout); 

                      if now_count < -99999{
                       return_count = now_count;
                       break;
                      } else if return_count > now_count {
                          return_count = now_count;
                      }
              }
              
          }
          memo_banmen_pre.insert((self.black,self.white),boards);
          return return_count;
          
       }
   }

    fn last_eval_mini_max_sub(&self, color: usize, turn: usize, times:&mut u64, n:usize, memo_eval: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64,isize)>> ,memo_banmen: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64)>>,memo_banmen_pre: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64)>>, start_time: Instant, timeout: Duration)->isize{
        *times += 1;

        let mut memo:Vec<(OthelloBoard,u64,isize)> = vec![];
        let boards: Vec<(OthelloBoard,u64)>;
        let mut return_count:isize;
        let mut now_count:isize;
        let n_1 = n-1;


        if let Some(value) = (*memo_banmen_pre).get(&(self.black,self.white)){
           //println!("Cash Hit BANMEN");
           if value.is_empty(){
               return 50000*self.subtract(color);
           }

           let copied:Vec<(OthelloBoard, u64)> = value.iter().skip(1).cloned().collect();
   
           if value[0].0.white != color as u64{
               return_count = isize::MIN;
               for (board,pos) in copied {
                   let elapsed_time = start_time.elapsed();

                   if elapsed_time >= timeout {
                       return -777;
                   }

                       now_count = board.last_eval_mini_max_sub3(color, color^0b1, times, n_1,memo_eval, memo_banmen,memo_banmen_pre,start_time,timeout);

                       memo.push((OthelloBoard{black:board.black,white:board.white},pos,now_count));
                       
                       if now_count > 99999{
                           return_count = now_count;
                           break;
                       } else if return_count < now_count {
                              return_count = now_count;
                       }
                       
               }
               memo.sort_by(|a, b| b.2.cmp(&a.2)); //a>b
               memo_eval.insert((self.black,self.white), memo);
               return return_count;

           } else{
               return_count = isize::MAX;
               for (board,_) in copied {
                   let elapsed_time = start_time.elapsed();

                   if elapsed_time >= timeout {
                       return -777;
                   }

                       now_count = board.last_eval_mini_max_sub(color, color, times, n_1,memo_eval, memo_banmen,memo_banmen_pre,start_time,timeout); 

                       if now_count < -99999{
                           return_count = now_count;
                           break;
                          } else if return_count > now_count {
                              return_count = now_count;
                          }
               }
               return return_count;
           }
        }
        else{
           //println!("No HIt");
           boards = self.make_1_next_boards1_5_2(turn);
       
           if boards.is_empty(){
               return 50000*self.subtract(color);
           }
   
           if boards[0].0.white != color as u64{
               return_count = isize::MIN;
               for (board,pos) in boards.iter().skip(1) {
                   let elapsed_time = start_time.elapsed();

                   if elapsed_time >= timeout {
                       return -777;
                   }

                       now_count = board.last_eval_mini_max_sub3(color, color^0b1, times, n_1,memo_eval, memo_banmen,memo_banmen_pre,start_time,timeout);

                       memo.push((OthelloBoard{black:board.black,white:board.white},*pos,now_count));
                       
                       if now_count > 99999{
                           return_count = now_count;
                           break;
                       } else if return_count < now_count {
                              return_count = now_count;
                       } 
               }
               memo.sort_by(|a, b| b.2.cmp(&a.2)); //a>b
               memo_eval.insert((self.black,self.white), memo);
           } else{
               return_count = isize::MAX;
               for (board,_) in boards.iter().skip(1) {
                   let elapsed_time = start_time.elapsed();

                   if elapsed_time >= timeout {
                       return -777;
                   }

                       now_count = board.last_eval_mini_max_sub(color, color, times, n_1,memo_eval, memo_banmen,memo_banmen_pre,start_time,timeout); 

                       if now_count < -99999{
                           return_count = now_count;
                           break;
                          } else if return_count > now_count {
                              return_count = now_count;
                          }
               }
               
           }
           return return_count;
           
        }
    }

    fn last_eval_mini_max(&self, color: usize, start_time: Instant, timeout: Duration, n:&mut usize, memo_eval: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64,isize)>> ,memo_eval_pre: &HashMap<(u64,u64),Vec<(OthelloBoard,u64,isize)>> ,memo_banmen: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64)>>,memo_banmen_pre: &mut HashMap<(u64,u64),Vec<(OthelloBoard,u64)>>)-> usize{
       let mut return_count:isize = isize::MIN;
       let mut now_count:isize;
       let mut times= 0;
       let aite = color^0b1;
       let n_1 = *n-1;
       let mut return_pos = 0;

       if let Some(value) = (*memo_eval_pre).get(&(self.black,self.white)) {

           for (board,pos,score) in value {
               let elapsed_time = start_time.elapsed();
               if elapsed_time > timeout{
                   now_count = *score;
               }else{
                   now_count = (*board).last_eval_mini_max_sub(color, aite, &mut times, n_1, memo_eval,memo_banmen,memo_banmen_pre,start_time,timeout);
                   if now_count == -777{
                       now_count = *score;
                   }
               }

               println!("score:{}",now_count);

               if now_count > 99999{
                   return_pos = *pos;
                   println!("certain to win");
                   break;
               }

               if return_count < now_count {
                       return_count = now_count;  
                       return_pos = *pos;
               }
           
           }

       } else {
           //println!("No Hit");
           let boards: Vec<(OthelloBoard, u64, isize)> = self.make_1_next_boards2_5(color);

           for (board,pos,_) in boards {
                   let elapsed_time = start_time.elapsed();
                   if elapsed_time > timeout{
                       *n -= 1;
                       break;
                   }else{
                       now_count = board.last_eval_mini_max_sub(color, aite, &mut times, n_1,memo_eval, memo_banmen,memo_banmen_pre,start_time,timeout);
                       println!("score:{}",now_count);

                       if now_count > 99999{
                           return_pos = pos;
                           println!("certain to win");
                           break;
                       }
       
                       if return_count < now_count {
                               return_count = now_count;  
                               return_pos = pos;
                       }
                   }
               
           }
       }

       if return_count < -99999{
           println!("certain to lose");
       }

        let mut position = return_pos >> 1;
        position |= position >> 1;
        position |= position >> 2;
        position |= position >> 4;
        position |= position >> 8;
        position |= position >> 16;
        position |= position >> 32;

        return count_pieces(position) as usize;
    }

}


fn main() {
    let mut input_line = String::new();
    io::stdin().read_line(&mut input_line).unwrap();
    let id = parse_input!(input_line, i32); // id of your player.
    let mut input_line = String::new();
    io::stdin().read_line(&mut input_line).unwrap();
    let board_size = parse_input!(input_line, i32);
    let mut n = 4;
    let mut memo_eval:HashMap<(u64,u64), Vec<(OthelloBoard,u64,isize)>> = HashMap::new();
    let mut memo_eval_pre:HashMap<(u64,u64), Vec<(OthelloBoard,u64,isize)>> = HashMap::new();
    let mut memo_yomikiri:HashMap<(u64,u64), Vec<(OthelloBoard,u64,isize)>> = HashMap::new();
    let mut memo_banmen:HashMap<(u64,u64), Vec<(OthelloBoard,u64)>> = HashMap::new();
    let mut memo_banmen_pre:HashMap<(u64,u64), Vec<(OthelloBoard,u64)>> = HashMap::new();

    // game loop
    loop {

        let mut bitboard:OthelloBoard = OthelloBoard{
            black: 0,
            white: 0,
        };
        for _ in 0..board_size as usize {
            let mut input_line = String::new();
            io::stdin().read_line(&mut input_line).unwrap();
            let line = input_line.trim().to_string();
             // rows from top to bottom (viewer perspective).

             let chars: Vec<char> = line
             .trim()
             .chars()
             .collect();

             for i in chars.iter(){
                bitboard.black >>= 1;
                bitboard.white >>= 1;
                if *i == '0' {
                    bitboard.black |= 0x8000000000000000;
                }else if *i == '1'{
                    bitboard.white |= 0x8000000000000000;
                }

             }
        }

        let mut input_line = String::new();
        io::stdin().read_line(&mut input_line).unwrap();
        let action_count = parse_input!(input_line, i32); // number of legal actions for this turn.
        for _ in 0..action_count as usize {
            let mut input_line = String::new();
            io::stdin().read_line(&mut input_line).unwrap();
            //let action = input_line.trim().to_string(); // the action
        }

        let start_time = Instant::now();
        let timeout_for_final = Duration::from_millis(140 as u64);

        let count = count_pieces(bitboard.black | bitboard.white);

        let bit:usize;

        bit = bitboard.eval_boards(id as usize, count as usize, &mut n, start_time, timeout_for_final, &mut memo_banmen,&mut memo_banmen_pre,&mut memo_yomikiri,&mut memo_eval, &memo_eval_pre);

        // println!("{}",count);
        //println!("{}",bitboard.black);
         //println!("{}",bitboard.white);
        let yoko = bit % 8;
        let tate = (bit / 8) + 1;
        let mapping = vec!['a','b','c','d','e','f','g','h'];

        let getc: Vec<String> = vec![mapping[yoko].to_string(), tate.to_string()];
        // Write an action using println!("message...");
        // To debug: eprintln!("Debug message...");

        println!("{}{}",getc[0],getc[1]); // a-h1-8

        memo_eval_pre = memo_eval;
        memo_banmen = HashMap::new();
        memo_eval = HashMap::new();
        memo_yomikiri = HashMap::new();
        
    }
}
